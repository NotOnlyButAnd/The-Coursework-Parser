694
РАЗРАБОТКА ПРОГРАММНЫХ МОДУЛЕЙ ДЛЯ ВИРТУАЛЬНОЙ ЛАБОРАТОРИИ ИССЛЕДОВАНИЯ МОБИЛЬНЫХ AD HOC СЕТЕЙ 
3 Клиент-сервер 
3.1 Общие сведения . 
----------
Клиент-сервер — вычислительная или сетевая архитектура, в которой задания или сетевая нагрузка распределены между поставщиками услуг, называемыми серверами, и заказчиками услуг, называемыми клиентами. Физически клиент и сервер — это программное обеспечение. Обычно они взаимодействуют через компьютерную сеть посредством сетевых протоколов и находятся на разных вычислительных машинах, но могут выполняться также и на одной машине. Программы — сервера, ожидают от клиентских программ запросы и предоставляют им свои ресурсы в виде данных. Пример коммуникации клиент-серверного приложения изображен на рисунке 14.
Рисунок 14 – Коммуникация сервера с клиентом
Рассмотрим преимущества и недостатки использования клиент-серверной сетевой архитектуры.
Преимущества:
* Клиентам не нужно дублировать код серверной части программы
* Низкие требования к программам клиентам, так как все основные вычисления выполняются на сервере
* Все данные хранятся на сервере
* Организация 	контроля 	полномочий, 	только 	клиенты 	с
соотвествующими правами доступа могут осуществлять назначенные им соотвествующие операции Недостатки:
* Неработоспособность сервера может сделать неработоспособной всю вычислительную сеть. Неработоспособным сервером следует считать сервер, производительности которого не хватает на обслуживание всех клиентов, а также сервер, находящийся на ремонте, профилактике и т. п
* Поддержка работы данной системы требует отдельного специалиста
Высокая стоимость оборудования
Платформа .NET Framework — это управляемая среда выполнения, предоставляющая широкий спектр служб для создания всех типов приложений. Она состоит из двух основных компонентов: общеязыковой выолняемой среды CLR и библиотеки классов .NET Framework. Рассмотрим службы, которые предоставляет .NET Framework выполняемым в ней приложениям:
Управление памятью. Во многих языках программисты должны предусматривать выделение и освобождение памяти, а также управлять временем жизни объектов. В приложениях .NET Framework  эти функции выполняет среда CLR
Общая система типов. В традиционных языках программирования базовые типы определяются компилятором, что усложняет взаимодействие между языками. В .NET Framework базовые типы определяются системой типов .NET Framework, при этом для всех языков  .NET Framework  используются одни и те же базовые типы
Обширная библиотека классов. Разработчикам не требуется писать код для выполнения стандартных низкоуровневых операций программирования, поскольку они могут использовать удобную библиотеку входящую в библиотеку классов .NET Framework
Платформы и технологии разработки. Платформа .NET Framework включает библиотеки для конкретных областей разработки приложений, например ASP.NET для веб-приложений, ADO.NET для доступа к данным и Windows Communication Foundation для приложений, ориентированных на службы
Взаимодействие языков. Языковые компиляторы, ориентированные на .NET Framework, выдают промежуточный код, называемый языком CIL (Common Intermediate Language), который в свою очередь компилируется во время выполнения средой CLR. С помощью этой функции подпрограммы, написанные на одном языке, доступны в других языках, поэтому разработчики могут создавать приложения на одном или нескольких предпочитаемых языках
Совместимость версий. Как правило приложения, разработанные на основе конкретной версии платформы .NET Framework, могут
выполняться без доработок и на более поздних версиях платформы
Параллельное выполнение. Платформа .NET Framework помогает разрешать конфликты версий, поскольку на компьютере могут быть установлены несколько версий среды CLR. Это означает, что несколько версий приложений также могут существовать, и что приложение может выполняться на версии платформы .NET Framework, для которой оно было создано
Настройка для различных версий. Используя переносимую библиотеку классов платформы .NET Framework, разработчики могут создавать сборки, которые работают на нескольких платформах .NET Framework, например Windows 7, Windows 8, Windows 8.1, Windows 10, Windows
Phone и Xbox 360
[Абрамян М. Э. Visual C# на примерах. с. 256]
Платформа Microsoft .NET Framework предоставляет многоуровневую, расширяемую и управляемую реализацию служб сети, которые можно быстро и легко интегрировать в приложения.
Классы доступа к сети в  System.Net  и пространства имен System.Net.Sockets можно использовать для реализации клиент-серверных приложений.
Класс Socket поддерживает 2 основных режима, синхронный и асинхронный. В синхронном режиме, вызовы функций, которые выполняют сетевые операции (например Send и Receive ) ожидают, пока операция не завершится до возвращения элемента управления в вызывающей программе. В асинхронном режиме, эти вызовы возвращают немедленно.
Для приложений, которым необходимо выполнить простые запросы, класс WebClient предоставляет общие методы для передачи данных или загрузки данных с сервера через интернет. WebClient основан на классе WebRequest для обеспечения доступа к интернет-ресурсам. Поэтому класс WebClient может использовать любой зарегистрированный подключаемый протокол.
Для приложений, которые не могут использовать модель запроса - ответа или для приложений, которые должны прослушиваться в сети так же, как отправлять запросы, System.Net.Sockets - пространство имен предоставляет классы TCPClient, TCPListener и UDPClient. Эти классы отвечают за установление подключений с использованием различных транспортных протоколов и предоставляют сетевые подключения другим приложениям в виде потоков. [Троелсен Э. Язык программирования C# и платформа .NET с. 478]