659
СТОХАСТИЧЕСКИЙ АНАЛИЗ УГРОЗЫ РАСКРЫТИЯ СУЩЕСТВОВАНИЯ МОБИЛЬНОЙ РАСПРЕДЕЛЕННОЙ КОМПЬЮТЕРНОЙ СИСТЕМЫ ПЕЛЕНГАЦИЕЙ СИГНАЛОВ УЗЛОВ 
3 Разработка программы 
3.2 Описание работы программы 
----------
Данная программа в своей точке входа Main(string[] args) начинает перебор всех данных значений. Далее вызывается конструктор класса мобильной сети Network(), в котором генерируются и хранятся в списке объекты класса вершин данной генерируемой сети.
Изначально вызывается процедура CreateNetwork(). В ней в пределах данной области по осям абсцисс и ординат с использованием случайного равномерного независимого распределения генерируются случайные значения, являющиеся координатами нового узла мобильной сети и заполняется список сгенерированных для данной сети вершин.
Для сгенерированных вершин с использованием процедуры ComputeAdjacencyMatrix() строится матрица смежности. Условием условного соединения вершин является полный попарный перебор всех вершин графа. Для каждой такой пары вершин ищется расстояние между ними, которое используется для нахождения уровня сигнала k*R-α. Если данное значение превосходит уровень электромагнитного шума ω, то в ячейке матрицы смежности на строке с номером вершины-источника и в столбце с номером вершины-приемника ставится значение 1, характеризующее наличие сигнала, иначе – значение 0.
Следующим шагом заполненная матрица смежности является основой для формирования списка компонент связности. Вызывается процедура ComputeConnectivityComponentList(), которая также проверяет граф на полную связность – граф является связным, если найдена лишь одна компонента связности.
Для поиска компонент связности используется модифицированный алгоритм обхода графа в глубину. Данный алгоритм является одним из основных алгоритмов в теории графов, поскольку позволяет обойти все доступные вершины, начиная из выбранной. Его модификация заключается в сохранении результатов достижения вершин из выбранной, которое позволяет выделить в сгенерированном графе компоненты связности.
Из процедуры по поиску компонент связности вызывается функция DFS(int startNode, bool[] used). На вход данная функция принимает корневую вершину (основную для своего вызова) и массив использованных вершин, все се вершины изначально помечены false. Для полного прохода графа данный алгоритм запускается для каждой неиспользованной ранее вершины. Данный алгоритм является рекурсивным. Основой для возврата из рекурсивной ветви является отсутствие не посещённых соседей для вершины, корневой для данного вызова функции. При вызове данной функции корневая вершина проверяет всех своих соседей, то есть вершины, к которым из нее есть непосредственный сигнал, и если она еще не была посещена, инициирует вызов функции для данного соседа.
Возвращаемым значением функции является список посещенных вершин. Вызывая данную функцию для всех своих соседей, корневая вершина получает список всех доступных, возможно, через посредников, вершин, и конкатенирует данный список с собственным номером, возвращая итоговый список вершин вверх по линии рекурсии. После формирования списка одной из компонент связности вошедшие в него вершины исключаются из общего списка вершин, из которых следует запускать данный алгоритм, для оптимизации работы алгоритма и исключения повторений компонент связности.
Далее данная функция запускается для всех оставшихся вершин. Если в итоге в списке неиспользованных вершин осталась единственная вершина, она помечается как отдельная компонента связности и также помещается в общий список.
Каждое возвращенное значение есть компонента связности класса ConnectivityComponent, которая сохраняется в список компонент связности. На основании полученного списка вычисляется длина данного списка, и если она равна 1, значит, все вершины данного геометрического графа, то есть все узлы мобильной сети, попали в одну компоненту связности, следовательно, граф является связным.
Для проверки пеленгации данной сети создается объект класса Pelengator в случайной точке области распределения мобильной сети. Далее вызывается функция ComputePeleng(), которая на основании уже распределенных вершин мобильной компьютерной сети вычисляет значение функции U(x, y), то есть находит общий уровень электромагнитного излучения мобильной сети в точке нахождения пеленгатора. Сумма вычисляется на основании сигналов от каждого узла сети с использованием зависимости k*R-α. R – расстояние от узла сети до местонахождения пеленгатора предполагаемого противника, коэффициенты k и α заданы общими для всей сети. Если сумма данных уровней сигнала превышает значение общего электромагнитного шума ω, то регистрируется раскрытие существования данной мобильной сети, и функция возвращает значение true.
После выполнения данных функций полученные данные о количестве компонент связности и попытке пеленга собираются и сохраняются. Количество компонент связности в данном случае судит о возможной работоспособности сети, а результаты попытки пеленга – о возможном раскрытии существования сети ad hoc. Данный алгоритм запускается 105 раз для каждого уникального набора перебираемых параметров и усредняется.
Полученные данные записываются в текстовый файл с разделителем «;», после чего эти данные могут быть экспортированы для дальнейшего анализа. Полученные данные идентифицируют работоспособность сети при данных параметрах и уровень электромагнитного излучения, которое она генерирует.