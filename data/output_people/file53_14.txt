842
РАЗРАБОТКА ВЫСОКОНАГРУЖЕННОГО РАСПРЕДЕЛЕННОГО ПРИЛОЖЕНИЯ 
4 Функциональность пользовательской части проекта . 
4.3 Описание страницы чата реализуемого проекта 
----------
При успешной авторизации пользователя, происходит редирект на страницу chat.php, которая первым делом проверяет, была ли осуществлена авторизация и в обратном случае перебрасывает пользователя на страницу index.php. Это сделано во избежание возможности ввода адреса страницы chat.php в адресной строке браузера, и тем самым обхода процедуры авторизации.
Скрипт chat.php подключает файл frames.php, структура которого была рассмотрена в главе 2 (Рис. 3.) и в зависимости от выбранного пользователем варианта дизайна выводит соответствующий вариант страницы. Каждый вариант дизайна – это определѐнный подключаемый CSS файл.
При выборе светлого дизайна подключается файл light.css, как показано на рисунке 12.
Рисунок 12 — Светлый дизайн чата
При выборе тѐмного дизайна подключается файл dark.css, как на рисунке
13.
Рисунок 13 — Тѐмный дизайн чата
Структура страницы следующая и изображена на рисунке 14.
Рисунок 14 — Структура чата
Рассмотрим теперь каждый блок отдельно.
За блок сообщений чата отвечает скрипт text.php. Принцип его работы заключается в том, что с некоторой периодичностью, заданной пользователем при авторизации, он открывает файл chat.txt и построчно выводит его на страницу. Если в текущей обрабатываемой строке содержится имя данного пользователя, то сообщение в строке помещается внутрь тега <div>…</div>.
<div class=‖mess‖> Строка файла chat.txt</div>
Класс .mess в подключаемой таблице стилей характеризуется более тѐмным фоном текста, за счѐт чего возникает эффект подсветки строки сообщения, в случаях если сообщение было отправлено текущим пользователем, или адресовано текущему пользователю.
За блок посетителей онлайн отвечает скрипт users.php. Принцип его работы заключается в том, что с некоторой периодичностью, заданной в конфигурационном файле config.php и равной по умолчанию 10 секундам, выводится на странице список пользователей онлайн. Принцип построения списка пользователей описан в главе 4.2, в описании блока 4 главной страницы приложения.
При нажатии на любого из пользователей в этом списке запускается простенький javascript который добавляет имя пользователя в поле «Кому:» блока отправки сообщений.
Также данный скрипт проверяет, есть ли в списке пользователей онлайн имя данного пользователя, если его имени в списке нет, это означает, что пользователь не был активен определѐнный отрезок времени, заданный в файле config.php и по умолчанию равный 20 минутам. В этом случае происходит редирект на главную страницу, причѐм методом GET скрипту index.php передаѐтся значение переменной ?reg=3.
Ещѐ одна функция этого скрипта, это подсчѐт количества строк в файле chat.txt. Если количество строк больше величины заданной в файле config.php и по умолчанию равной 15, то скрипт переписывает данный файл, оставляя в нѐм только последние 15 записей.
За блок отправки сообщений отвечает скрипт send.php. Он проверяет заблокирован ли данный пользователь, если да, то выводится следующее сообщение, как изображено на рисунке 15.
Рисунок 15 — Сообщение о блокировке
Если пользователь не заблокирован, выводится форма со следующими элементами управления:
* поле ввода адресата;
* поле ввода сообщения;
* выпадающий список выбора текста сообщения;
* кнопка отправки сообщения;
* кнопка выхода из чата;
* ссылка на панель администратора (есть только если данный пользователь является администратором);
Эта форма изображена на рисунке 16.
Рисунок 16 — Форма ввода сообщения
При нажатии на кнопку «Отправить» сообщение добавляется в файл chat.php, по следующей схеме:
[часы:мин:сек]<font color= ―цвет"> Адресат: Сообщение </font>
Причѐм данные полей ввода пропускаются через функцию htmlspecialchars(), которая преобразует специальные символы в HTML сущности, тем самым не позволяя пользователю ввести HTML код, который бы мог повлиять на внешний вид сообщения.
Если в тексте сообщения встречаются последовательности символов (1), (2),…,(16) они заменяются на <IMG SRC='smiles/1.gif'>, <IMG
SRC='smiles/2.gif'>,…, <IMG SRC='smiles/16.gif'>. Тем самым преобразуя эти последовательности в HTML—код для вывода на экран смайлов.
При нажатии на кнопку «Выход» запускается скрипт out.php, который изменяет значение поля online базы дынных на 0, после чего происходит редирект на главную страницу.
За содержимое этого блока отвечает файл logo.php. В зависимости от выбора варианта дизайна выводит светлое либо тѐмное лого.
За блок смайлов отвечает скрипт smiles.php. Он в цикле выводит в фрэйм 16 смайлов. Каждый смайл при нажатии добавляет в поле ввода сообщения последовательность символов, которая в последствии будет заменена на HTML—код для вывода на экран смайла.
За вывод страницы панели администратора отвечает скрипт admin.php. При загрузке этого скрипта, проверяется была ли пройдена авторизация и если да, то обладает ли авторизированный пользователь правами администратора.
Если нет, то происходит редирект на главную страницу.
Права администратора указаны на рисунке 17.
Рисунок 17 — Панель администратора
С помощью панели администратора можно:
* удалить пользователя из базы данных;
* заблокировать/разблокировать пользователя;
* изменить пароль пользователя;
* наделить пользователя правами администратора;
* снять с пользователя права администратора;
Для того чтобы разработанное приложение могло быть без проблем использовано на удалѐнном хостинге, необходимо чтобы оно обладало удобной системой инсталляции и конфигурирования, чего лишены большая часть бесплатных web чатов, доступных для скачивания в интернете.
Конфигурирование чата осуществляется путѐм редактирования файла config.php.
<?php
$user_refresh = 10;
//Через сколько секунд обновляется список пользователей
$num_lines = 15;
//Сколько сообщений хранится в памяти и выводится на экран
$min_offline = 20;
// Если пользователь бездействует это количество минут, он //считается вышедшим из чата
?>
За инсталляцию чата отвечает скрипт install.php. Он использует конфигурационный файл config.txt. И сохраняет в нѐм данные введѐнные при инсталляции, эти данные затем используются для доступа к базе данных.
При нажатии на кнопку «Установить» скрипт с помощью SQL – запросов:
* создаѐт базу данных;
* входит в созданную базу данных;
* создаѐт в ней таблицу user, для хранения данных о пользователях;