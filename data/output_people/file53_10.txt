1147
РАЗРАБОТКА ВЫСОКОНАГРУЖЕННОГО РАСПРЕДЕЛЕННОГО ПРИЛОЖЕНИЯ 
3 Реализация административной части проекта 
3.2 Взаимодействие с базой данных посредством технологий PHP 
----------
В качестве серверной технологии при создании динамических страниц использовался язык программирования PHP. Все операции по взаимодействию с базой данных построенны на базе языка PHP. PHP — язык программирования, созданный для генерирования HTML—страниц на веб— сервере и работы с базами данных.
Для выполнения SQL запроса необходимо произвести следующие действия:
 соединение с сервером;
Прежде чем работать с базой данных, необходимо установить с ней сетевое соединение, а также провести авторизацию пользователя. Для  этого служит функция mysql_connect().
int mysql_connect([string $host] [,string $user] [,string $password])
Функция mysql_connect() устанавливает сетевое соединение с базой данных MySQL, расположенной на хосте $host (по умолчанию это localhost, т.е. текущий компьютер), и возвращает идентификатор открытого соединения. Вся дальнейшая работа ведѐтся именно с этим идентификатором. Также указывается имя пользователя $user  и пароль —  $password.
Соединение с MySQL — сервером будет автоматически закрыто по завершении работы сценария, либо же при вызове функции mysql_close().
 подключение к базе данных; int mysql_select_db (string $dbname [,int $link_identifier])
До того как послать первый запрос серверу MySQL, необходимо указать, с какой базой данных мы собираемся работать. Для этого и предназначена описываемая функция. Она уведомляет PHP, что в дальнейших операциях с соединением $link_identifier будет использоваться база данных $dbname.
Использование этих функций и подключение к базе данных к таблице реализовано в отдельном файле — my_sql_base.php. Этот файл использует конфигурационный файл config.txt, в котором записаны данные для подключения к базе данных. В первой строчке – хост, во второй – имя пользователя, которому разрешено создание баз данных, добавление таблиц и изменение записей таблиц. В третьей строчке – пароль этого пользователя.
Использование конфигурационного txt файла облегчает инсталляцию чата на реальный интернет хостинг, предоставляющий возможность использования MySQL базы данных. На таких хостингах обычно выдаются имя пользователя и пароль, и такое простое и лѐгкое изменение конфигурации скрипта чата позволяет легко настроить web чат на удалѐнном хостинге.
<?php   require_once "lib/mysql_qw.php";
$file2=file("config.txt");
$hostname = trim($file2[0]);
$username = trim($file2[1]);
$userpassword = trim($file2[2]);
$sql_bd = @mysql_connect($hostname,$username,$userpassword)   or die("Could not connect to database.");
@mysql_select_db("chat");
?>
C помощью инструкции require_once мы подключаем внешний файл lib/mysql_qw.php в нашу программу, с проверкой на то, был ли этот файл подключѐн ранее, и если был, то не подключаем ещѐ раз. О файле lib/mysql_qw.php подробнее будет рассказано в следующем подпункте, посвящѐнном выполнению запросов. Затем ассоциируется переменной файл config.txt и каждая его строчка присваевается различным переменным  $hostname, $username, $userpassword. Затем, используя данные в этих переменных, устанавливаем соединение с сервером и проходим авторизацию с помощью описанной выше функции mysql_connect. Следующей строчкой
подключаемся к базе данных – «chat».
Для выполнения SQL запроса используется функция mysql_query(―SQL — запрос‖). Но так как она не поддерживает встроенное экранирование спецсимволов, и тем самым может стать брешью в защите разработанного web чата, была разработана альтернативная функция. Идея заключается в том, что вместо явного экранирования и вставки переменных в запрос на их место помещаются специальные маркеры (placeholders, «хранители места»), выглядящие как ?. Те же значения, которые будут подставлены вместо них, передаются отдельно, дополнительными параметрами. С использованием нашей функции mysql_qw(), код которой будет описан чуть ниже, запрос к базе данных с использованием переменных мог бы выглядеть следующим образом:
mysql_qw(‗DELETE FROM user WHERE name=?‘,$name);
таким образом, использование этой функции напоминает использование стандартной функции вывода sprintf()  языка С++.
<?php ## Простейшая функция для работы с placeholder—ами.
// result—set mysql_qw($connection_id, $query, $arg1, $arg2, ...)
//  — или —
// result—set mysql_qw($query, $arg1, $arg2, ...)
// Функция выполняет запрос к MySQL через соединение, заданное как // $connection_id (если не указано, то через последнее открытое).
// Параметр $query может содержать подстановочные знаки ?,
// вместо которых будут подставлены соответствующие значения
// аргументов $arg1, $arg2 и т.д. (по порядку), экранированные и
// заключенные в апострофы. function mysql_qw() {
// Получаем все аргументы функции.   $args = func_get_args();
// Если первый параметр имеет тип "ресурс", то это ID соединения.
$conn = null;   if (is_resource($args[0])) $conn = array_shift($args);
// Формируем запрос по шаблону.
$query = call_user_func_array("mysql_make_qw", $args);
// Вызываем SQL—функцию.
return $conn!==null? mysql_query($query, $conn) : mysql_query($query); }
// string mysql_make_qw($query, $arg1, $arg2, ...)
// Данная функция формирует SQL—запрос по шаблону $query,
// содержащему placeholder—ы. function mysql_make_qw() {   $args = func_get_args();
// Получаем в $tmpl ССЫЛКУ на шаблон запроса.
$tmpl =& $args[0];
$tmpl = str_replace("%", "%%", $tmpl);
$tmpl = str_replace("?", "%s", $tmpl);
// После этого $args[0] также окажется измененным.
// Теперь экранируем все аргументы, кроме первого.
foreach ($args as $i=>$v) {     if (!$i) continue;        // это шаблон     if (is_int($v)) continue; // целые числа не нужно экранировать     $args[$i] = "'".mysql_escape_string($v)."'";
}
// 	На 	всякий 	случай 	заполняем 	20 	последних 	аргументов
// недопустимыми
// значениями, чтобы в случае, если число "?" превышает количество   // параметров, выдавалась ошибка SQL—запроса (поможет при
//отладке).   for ($i=$c=count($args)—1; $i<$c+20; $i++)      $args[$i+1] = "UNKNOWN_PLACEHOLDER_$i";
// Формируем SQL—запрос.
return call_user_func_array("sprintf", $args);
}
?>
Извлечение набора записи из идентификатора рессурса, возвращенного функцией mysql_query() производится при помощи функции mysql_fetch_assoc(). mysql_fetch_assoc — извлекает ряд результата как ассоциативный массив. Возвращает ассоциативный массив, соответствующий извлечѐнному ряду, или FALSE, если рядов больше нет.
Способ обработки выборки следующий:
* в цикле for;
// $result — идентификатор рессурса for (;$row = mysql_fetch_assoc($result);){
// обработка записей
}
* в цикле while;
// $result — идентификатор рессурса while ($row = mysql_fetch_assoc($result)){ // обработка записей
}
* в цикле do … while;
// $result — идентификатор рессурса do {
// обработка записей
}while ($row = mysql_fetch_assoc($result));
Запросы в базу данных используются в следующих случаях:
а) проверка есть ли пользователем с таким именем в базе данных, для этого формируется запрос на количество совпадений по имени, если количество больше 0, то пользователь с таким именем существует;
$sql_count = @mysql_qw('SELECT COUNT(*) From user WHERE
name=?',trim($_POST['login']));
б) регистрация;
При регистрации добавляется новая запись в базу данных.
@mysql_qw('INSERT 	INTO 	user 	SET 	name=?, 	pass=?,
time=?',trim($_POST['login']),md5(trim($_POST['pass'])),time());
в) для вывода пользователей, которые находятся онлайн. Для этого ведѐтся выборка среди тех пользователей, у которых поле online=1 и поле time> time()—$min_offline*60. Последнее условие проверяет, зарегистрирована ли активность пользователя в течение последних $min_offline минут. Если пользователь был не активен всѐ это время то, он считается оффлайн. Значение переменной $min_offline задаѐтся в файле config.php и по умолчанию равно 20 минутам
$all_online = @mysql_qw('SELECT name FROM user WHERE (online=?) and (time>?)',1,(time()—$min_offline*60));
г) при авторизации изменяет значение поля online =1  и поля time, задавая
ему текущее время в формате timestamp
@mysql_qw('UPDATE 	user 	SET 	online=?, 	time=? 	WHERE
name=?',1,time(),trim($_POST['auth_login']));
д) при нажатии на кнопку «Выход» изменяет значение поля      online =0
@mysql_qw('UPDATE 	user 	SET 	online=? 	WHERE
name=?',0,$_SESSION['user']);
е) изменение поля time на текущее время, при отправки сообщения
@mysql_qw('UPDATE 	user 	SET 	time=? 	WHERE
name=?',time(),$_SESSION['user']);
ж) 	для проверки является ли активный пользователь заблокированным
@mysql_qw('SELECT 	block 	From 	user 	WHERE
name=?',trim($_SESSION['user']));
з) для проверки является ли активный пользователь администратором
$sql_res 	= 	@mysql_qw('SELECT 	admin 	From 	user 	WHERE
name=?',($_SESSION['user']));
и) для удаления пользователя с заданным id из базы данных @mysql_qw('DELETE From user WHERE id=?;',$_POST['id']);
к) для блокировки пользователя с заданным id
@mysql_qw('UPDATE user SET block=? WHERE id=?',1,$_POST['id']);
л) для разблокировки пользователя с заданным id
@mysql_qw('UPDATE user SET block=? WHERE id=?',0,$_POST['id']);
м) для наделения пользователя правами администратора
@mysql_qw('UPDATE user SET admin=? WHERE id=?',10,$_POST['id']);
н) для снятия с пользователя прав администратора;
@mysql_qw('UPDATE user SET admin=? WHERE id=?',0,$_POST['id']);
п) для изменения пароля пользователя
@mysql_qw('UPDATE 	user 	SET 	pass=? 	WHERE
id=?',trim(md5($_POST['pass'])),$_POST['id']);