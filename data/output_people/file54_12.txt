1634
АРХИТЕКТУРА МОБИЛЬНЫХ РАСПРЕДЕЛЕННЫХ КОМПЬЮТЕРНЫХ СИСТЕМ, УПРАВЛЯЕМЫХ ИНТЕЛЛЕКТУАЛЬНЫМИ АГЕНТАМИ 
3 Реализация многофункционального мобильного приложения для ВУЗа 
3.2 Используемые стандартные средства Android 
----------
Для реализации данного приложения использовались следующие
библиотеки и классы:
1. 	SQLite - это встроенная библиотека, которая работает автономно
(без серверов), поддерживающая достаточно полный набор команд SQL. Несколько процессов или потоков могут одновременно без каких-либо проблем читать данные из общей базы данных. Запись в базу можно осуществить только в том случае, если никакие другие запросы в данный момент не обслуживаются, в противном случае, попытка записи оканчивается неудачей, и в программу возвращается код ошибки. Другим вариантом развития событий является автоматическое повторение попыток записи в течение заданного интервала времени.
Преимущества данной библиотеки:
а) каждая запись содержит виртуальный столбец rowid, который равен
64-битному номеру (уникальному для таблицы);
37
Таблица  -
б) легко переносить: по умолчанию, БД — это один файл (в
кроссплатформенном формате);
в) тип столбца не определяет тип хранимого значения в этом поле
записи, то есть в любой столбец можно занести любое значение;
Такой подход уменьшает накладные расходы, время отклика и упрощает разработку приложений для работы с данными.
Из этой библиотеки для разработки приложения были использованы следующие методы и классы:
а) SQLiteOpenHelper - вспомогательный класс для управления
созданием базы данных и управления версиями;
б) onCreate() - метод, который будет вызван, если базы данных, к
которой мы хотим подключиться, не существует;
в) getWritableDatabase() - метод выполняет подключение к базе данных и возвращает нам объект SQLiteDatabase, доступный для чтения и для записи;
г) getReadableDatabase() - метод выполняет подключение к базе данных и возвращает нам объект SQLiteDatabase, доступный только для чтения;
Основное 	различие 	между 	getReadableDatabase() 	и getWritableDatabase() проявляется при невозможности записи в базу данных (например, из-за отсутствия свободного места на диске).
При использовании метода getWritableDatabase() в этом случае при вызове метода происходит сбой с выдачей исключения SQLiteException. Но если использовать метод getReadableDatabase(), метод попытается получить ссылку на базу данных, предназначенную только для чтения. Если получить доступ к базе данных только для чтения не удастся, метод все равно выдает исключение SQLiteException.
д) 	ContentValues() 	- 	это 	объект, 	который 	используется 	для определения вставляемых значений в таблицу базы данных. При этом данные хранятся в виде пар «имя/ значение»;
е) 	insert() - метод добавляет в базу данных новую строку;
ж) query() - метод позволяет считывать данные из существующей базы
данных.
Данный класс использовался в программе для локального хранения расписания пользователя, что дает возможность просматривать его без соединения с интернетом. Класс ―AuthorizationActivity‖ получает расписание пользователя и добавляет его в базу данных ―TeacherAssistant‖ в таблицу ―schedule‖ или ―scheduleTeacher‖ в зависимости от типа пользователя(студент или преподаватель).
2. Intent (намерение) представляет собой объект обмена сообщениями, с помощью которого можно запросить выполнение действия у компонента другого приложения. Несмотря на то, что объекты Intent упрощают обмен данными между компонентами по нескольким аспектам. Андроид поддерживает явные и скрытые намерения.
Явные указывают, для какого компонента они предназначаются, т.е.
Java-класс, который должен быть вызван:
Intent intent = new Intent(MainActivity.this,
CalendarActivity.class) startActivity(intent);
Скрытые намерения делают запрос к системе на выполнение сервиса, не указывая какой класс Java должен выполняться этим сервисом. При создании скрытого Intent указывается действие, которое должно быть выполнено, и, опционально, URI, используемый в этом действии. Например, можно сообщить системе, что вы хотите просмотреть (это будет действием) веб-страницу (URI). При создании Intent с этими параметрами система попытается найти приложение, зарегистрированное для данного события, т.е. браузер.
При создании Intent был использован конструктор Intent (Context packageContext, Class cls) с двумя параметрами.
Первый параметр – это Context. Activity является подклассом Context, поэтому мы можем использовать ее ссылку на себя – this. Context – это объект, который предоставляет доступ к базовым функциям приложения таким как: доступ к ресурсам, к файловой системе, вызов Activiy и т.д.
Второй параметр – имя класса. При создании записи Activity в манифест-файле мы должны указать имя класса. И теперь если мы укажем тот же класс в Intent – то система, просмотрев манифест-файл обнаружит соответствие и покажет соответствующий Activity.
Из этой библиотеки использовались следующие методы и классы:
а) 	putExtra() - операция добавляет в Intent данные;
б) 	getStringExtra(String) - возвращает строку из Intent.
Данный класс используется в приложения для передачи данных между активити. Например, активити ―CalendarActivity‖ передает активити ―InformationAboutSubject‖ следующие данные: а)id студента; б)id выбранного предмета; в) номер выбранной пары по порядку; г) номер группы и подгруппы (если есть).
3. SharedPreferences. Это один из способов хранения данных в виде
файлов. Здесь значения хранятся в виде пары: «имя/ значение».
В работе были использованы следующие методы и классы:
а) getSharedPreferences(String, int) - получает содержимое файла указанного первым параметром, второй параметр указывает тип доступа к файлу;
б) Editor() - интерфейс, используемый для изменения содержимого
файла SharedPreferences;
в) getString(String key) - возвращает строковое значение пары по
указанному ключу из файла;
г) remove(String key) - метод отмечает данные, которые необходимо
будет удалить при вызове commit();
д) 	edit() - метод создает Editor, для данного файла;
е) 	commit() - сохранение изменений в SharedPreferences.
Данный способ хранения данных используется в приложении для хранения данных, полученных от сервера при авторизации. Класс ―AuthorizationActivity‖ создает файл под названием ―setting_kubsu‖, который хранит следующие данные: а) тип пользователя( студент или преподаватель); б) id пользователя; в) группа (подгруппа) у студента; г) фио пользователя. Также файл ―setting_kubsu‖ использовался в классах для получения информации об авторизованном пользователе.
4. Google.code.gson. Это библиотека, разработанная программистами гугл, предназначена для конвертирования JSON – объектов в Java - объекты и наоборот.
Из этой библиотеки использовались следующие методы и классы: а) JsonParser() - класс для выполнения работы с Json – объектами;
б) JsonArray() - метод для работы с массивом в Json – объекте;
в) Parse(String) - метод возвращает Json - Element из строки,
переданной в качестве параметра;
г) Get(String key).getAsString() - метод для получения Java – объекта из Json – объекта по заданному ключу.
Данная библиотека используется в приложении для отправки данных запроса к веб – серверу и парсинга полученного ответа. Например, в классе AsyncAuth создается JSON – объект и в него помещаются следующие данные: а) логин; б) пароль; в) тип пользователя. Затем выполняется Post –
запрос к веб – серверу для проверки корректности данных.
5. AlertDialog. Это класс для диалогового окна, в котором могут отображаться заголовок, кнопки вплоть до трех штук, список из выбираемых элементов либо пользовательский макет.
Диалоговое окно — это небольшое окно, которое предлагает
пользователю принять решение или ввести дополнительную информацию.
Из этой класса использовались следующие методы:
а) 	Builder() - создание диалогового окна;
б) setTitle(String) - метод для установки заголовка, переданного в
качестве параметра, в диалоговом окне;
в) setMessage(String) - метод для установки сообщения, переданного в
качестве параметра, в диалоговом окне;
г) setPositiveButton(String, OnclickListener) - метод для установки названия кнопки подтверждения (первый параметр), и действия, которое должно выполниться при нажатии (второй параметр);
д) setNegativeButton(String, OnclickListener) - метод для установки названия кнопки отмены (первый параметр), и действия, которое должно выполниться при нажатии (второй параметр);
е) setCancelable(boolean) - метод, позволяющий разрешить или
запретить закрывать диалоговое окно при нажатии клавиши ―back‖;
ж) show() - метод для отображения диалогового окна пользователю.
Данный класс используется в приложении для подтверждения
выполнения действий. Например, в активити ―GetDateAllLessonsActivity‖ при нажатии кнопки ―Добавить пару‖, отображается диалоговое окно для подтверждения или отмены создания новой пары.
6. BaseAdapter. Это общий класс для представления элемента списка
Listview.
Из этого класса использовались следующие методы:
а) notifyDataSetChanged() - уведомляет адаптер, что исходные данные были изменены и любое представление, отражающее набор данных должно обновить себя;
б) getCount() - функция возвращает общее количество элементов,
содержащихся в списковом представлении Listview;
в) getView(int, View, ViewGroup) - функция для представления элемента списка, которая вызывается автоматически. Для каждого элемента списка устанавливается макет, а затем добавляются данные, которые будут отображаться пользователю;
г) getItem(int) - функция предназначена для того, чтобы получить элемент данных из списка под номером, который передается в качестве параметра;
д) getItemId(int) - возвращает уникальный идентификатор элемента
списка под номером, который передали в качестве параметра;
Данный класс используется в приложении для отображения элементов ListView. Например, в ―CalendarActivity‖ для отображения расписания используется адаптер ―ScheduleAdapter‖, унаследованный от ―BaseAdapter‖.
Все адаптеры, использованные в приложении, являются наследниками ―BaseAdapter‖.
7. AsyncTask. Данный класс позволяет выполнять фоновые операции и публиковать результаты в пользовательском потоке, без необходимости манипулировать потоками(threads). Используется для коротких операций (не больше нескольких секунд).
Из этого класса использовались следующие методы:
а) onPreExecute() - метод вызывается в потоке пользовательского
интерфейса, прежде чем задача будет выполнена;
б) doInBackground( Params… ) - метод вызывается в фоновом потоке сразу после onPreExecute() для выполнения фоновых вычислений. Также этот метод может использовать publishProgress(Progress …), чтобы отобразить данные о ходе выполнения в пользовательском интерфейсе, с помощью метода onProgressUpdate(Progress …);
в) 	onProgressUpdate(  Progress…) - 	Данный метод вызывается в
потоке пользовательского интерфейса после вызова publishProgress(Progress...). При этом время исполнения не определено. Этот метод используется для отображения выполнения задачи в пользовательском интерфейсе, в то время как фоновое вычисление по-прежнему выполняется;
г) onPostExecute(Result) - данный метод вызывается в потоке
пользовательского интерфейса после того, как фоновый поток заканчивает вычисления. В результате фоновое вычисление передается в качестве параметра.
Данный класс используется в приложении для выполнения запрос к веб – серверу. Например, класс ―AsyncAddTask‖, унаследованный от ―AsyncTask‖ выполняет запрос к веб – серверу для добавления нового задания выбранной группе.
8. URLConnection. Данный класс предназначен для установления
соединения между клиентским приложением и веб – сервером.
В данном классе использовались следующие методы:
а) 	openConnection() – функция возвращает объект URLConnection;
б) setDoOutputStream(boolean) – данный метод определяет, будут ли
отправлены какие-либо данные от клиента к веб-серверу или нет;
в) getOutputStream() – функция возвращает поток вывода, который
используется в данном соединении с веб-сервером;
г) getInputStream() – функция возвращает входной поток, который
читается из этого соединения.
Данный класс использовался в приложении для установления соединения с веб – сервером, отправке данных и получения ответа от сервера. Например, класс ―AsyncGetListGroup‖ устанавливает соединение по адресу ―http://kirill7-14253.dobrohost.net/get_list_group.php‖ для получения списка выбранной группы.
9. 	OutputStreamWriter. 	Данный 	класс 	является 	«мостом» 	из
символьного потока в поток байтов.
В данном классе использовались следующие методы:
а) write(String) – метод записывает строку, переданную в качестве
параметра, в выходной поток;
б) flush() – данный метод сбрасывает поток вывода и заставляет
выписать любые выходные байты;
в) close() – данный метод закрывает выходной поток и освобождает
системные ресурсы, связанные с этим потоком.
Данный класс использовался в приложении для отправки данных запроса к веб – серверу. Например, класс ―AsyncGetListGroup‖ отправляет веб – серверу следующие данные: а) номер группы; б) номер подгруппы
(если есть).