364
РАЗРАБОТКА ПРОГРАММНЫХ МОДУЛЕЙ ДЛЯ ВИРТУАЛЬНОЙ ЛАБОРАТОРИИ ИССЛЕДОВАНИЯ МОБИЛЬНЫХ AD HOC СЕТЕЙ 
2 Программные модули . 
2.3 Модуль Algorithms 
----------
Модуль  Algorithms содержит алгоритмы для построения и анализа
выпуклой оболочки.
Методы, содержащиеся в модуле:
* Алгоритм для построения выпуклой оболочки QuickHull
* Площадь выпуклой оболочки
* Центр масс выпуклой оболочки
* Количество углов выпуклой оболочки
* Расстояние от центра тяжести многоугольника до центра области
Algorithms содержит вложенный класс Shape – фигура, данный класс имеет вспомогательный характер для определения выпуклой оболочки.
QuickHull  - рекурсивный алгоритм для построения выпуклой оболочки.
Время работы:
* Лучший случай, все точки внутри оболочки: O(n)
* Худший случай, все точки на оболочке: O(n2)
* Среднее время: O(nlogn)
На первом шаге алгоритм выполняет создание четырехугольника, соединяющего крайние точки, как показано на рисунке 5. Только точки, лежащие вне его, могут лежать на оболочке и будут рассматриваться в дальнейшем. В Каждый лежащий вне четырехугольника участок будет рекурсивно обработан функцией Quickhull. На диаграмме ниже изображена обработка верхнего-правого угла.
На шаге А также находится точка c - наиболее удаленная от линии (a,b). Следующим шагом определяем два множества точек: справа или на линии (a,c) и справа или на (c ,b), как показано на рисунке 6. Для них вновь выполняется вызов функции Quickhull.
Рисунок 5 – 1 шаг алгоритма 	 	 	 	Рисунок 6 – 2 шаг алгоритма
Ниже изображена аналогичная обработка первого множества. Находится точка c’, как показано на рисунке 7, наиболее удаленная от линии (a',b'), определяются два новых множества точек: справа или на (a',c') и (c',b').
Получается D на рисунке 8, которое затем обрабатывается дальше.
Рисунок 7 – 3 шаг алгоритма
Рисунок 8 – 4 шаг алгоритма
Алгоритм продолжает выполнять вызов Quickhull для этих двух множеств. На рисунках 9 и 10 показан результат вызова для первого множества. Если множество состоит только из двух точек, рекурсия останавливается, возвращая эти две точки как сторону выпуклой оболочки (рисунок 10, сторону изображает черная линия).
Рисунок 9 – 5 шаг алгоритма 	 	 	 	Рисунок 10 – 6 шаг алгоритма
Аналогичным способом обрабатываются верхний-левый, нижний-левый и нижний-правый углы, пока не получим полную выпуклую оболочку, как показано на рисунке 11. [Алгоритмы построения выпуклой оболочки. http://algolist.manual.ru/maths/geom/convhull/]
Рисунок 11 – Полная выпуклая оболочка
На случайном наборе точек этот алгоритм работает быстрее других алгоритмов. Наихудшее поведение алгоритм демонстрирует в случае, если заданные точки уже образуют выпуклый многоугольник, так как никакие точки в этом случае не отбрасываются. Тогда он выполняет O(n2) операций.