809
РАЗРАБОТКА РАСПРЕДЕЛЕННОЙ СИСТЕМЫ ИСПОЛЬЗОВАНИЯ УДАЛЕННЫХ ВЫЧИСЛИТЕЛЬНЫХ РЕСУРСОВ
2 Разработка распределенной вычислительной системы . 
2.3 Описание логической структуры . 
2.3.2 Основные компоненты . 
----------
Сформировав общую картину взаимодействия узлов системы, рассмотрим структуру самого узла, а именно программы CRDS позволяющей компьютеру выполнять роль компонента распределенной системы.
Система CRDS состоит из следующих компонентов, определяющих основную часть функционала:
1)  CRDS – сама система, организующая и управляющая работой остальных компонентов.
2)  Client или клиент – основной компонент отвечающий за клиентскую часть работы системы CRDS, именно этот компонент отправляет запросы на связь, а также обрабатывает ответы, на основании которых принимает решения по подключению. Также данный клиент является интерфейсом для взаимодействия пользователя с системой.
3)  ServerManager или менеджер серверов – основной компонент отвечающий за отправку ответа на запрос Client, а также дальнейшей установки связи и выделения для клиента вычислительной единицы, т.е. сервера. Информация о выделенных серверах хранится в менеджере серверов на основании которой ServerManager принимает решения в тех или иных ситуациях.
4)  ComputeEngine или вычислитель – управляющая компонента, которая доступна пользователю в абстрактном виде и по действиям которого, инициирует запрос от Client на новое подключение. После установки связи вычислитель работает напрямую с сервером, выделенным менеджером серверов.
5)  CRDSController или контроллер CRDS – управляющая компонента, позволяющая пользователю контролировать параметры системы CRDS.
Рассмотрим работу описанных выше компонентов при установке связи между двумя компьютерами (Рисунок 4).
Рисунок 4 – Взаимодействие компонентов CRDS между двумя компьютерами
Пусть в нашем распоряжении два компьютера с номерами 1 и 2. Во время запуска приложения CRDS, изначально создается компонент CRDS, который формирует Client и ServerManager, устанавливает связь (1) и продолжает работу в фоновом режиме.
При запуске пользователем своей программы на компьютере 1, которая использует компонент ComputeEngine для выполнения поставленной задачи, вычислитель отправляет запрос клиенту (2) на предоставление удаленного сервера. Client связывается описанными выше методами с ServerManager (3) CRDS компьютера 2, через локальную или глобальную сеть. ServerManager принимает запрос от клиента, загружает программу задачи, затем резервирует и запускает Server0 (3) на основе параметров полученных от клиента. После чего менеджер серверов отправляет данные клиенту для доступа к Server0 (4). Client пересылает полученные данные ComputeEngine (5), после чего тот устанавливает соединение с Server0 (6), передаёт ему задачу на выполнение и через некоторое время, запросив результат получает
(7).
Также на рисунке 4 рассмотрен случай применения CRDSController на компьютере 2 для управления CRDS. Пользователь пишет свою программу, которая с помощью компонента CRDSController может изменять параметры CRDS или её основных компонентов. При запуске программы CRDSController обращается к компоненте CRDS (8) с целью изменить параметры или получить данные. Система в ответ на полученный запрос изменяет (при необходимости) параметры сначала в CRDS, а затем в её компонентах (9), после чего возвращает CRDSController результат (10),
который пользователь может использовать в своих целях.
Использование описанной структуры CRDS уменьшает нагрузку на главные компоненты Client и ServerManager, так как после установки связи между ComputeEngine и удаленным сервером Server0, действия производятся только через эти компоненты, не затрагивая главные, которые в это время могут обрабатывать другие запросы.
Сформируем основные требования и свойства описанных компонент.
Client – выполняется под контролем CRDS в одном процессе, но в другом потоке. Клиент должен обеспечивать должен обеспечивать одновременный доступ к своему функционалу сразу нескольким объектам ComputeEngine. Также Client в процессе формирования связи должен быть устойчивым к сбоям. В случае, когда компьютер пользователя не подключен локальной или глобальной сети, клиент должен создать связь с локальным компонентом ServerManager и предоставить сервер от текущего компьютера, что гарантирует пользователю, что его задача будет выполнена. Клиент должен адаптироваться под настройки, внедряемые CRDS в процессе работы программы. Действия клиента полностью зависят от типа сети.
ServerManager – выполняется под контролем CRDS в одном процессе, но в другом потоке. Данный компонент должен обеспечивать доступ к своему функционалу сразу нескольким объектам Client.  ServerManagar должен быть устойчивым к сбоям и не зависеть от типа используемых подключений. Главная задача компонента – это управление запусками и остановкой серверов, которые включают в себя: установка максимально доступной памяти сервера, считывание информации, выдающиеся сервером в процессе работы – это выходные потоки и потоки ошибок, удаление процесса сервера при достижении им определенного статуса, загрузка файлов для выполнения задачи и запуск сервера, выделение и удаление директории для серверных фалов. ServerManager должен адаптироваться под настройки внедряемые CRDS в процессе работы программы.
CRDS – выполняется в отдельном потоке в одном процессе с Client и ServerManager. Как главный компонент, CRDS должен обеспечить работоспособность зависимых компонентов, а также осуществлять внедрение настроек, вводимых пользователем. CRDS доступен только в пределах компьютера (при использовании ip адреса 127.0.0.1) и только через компонент CRDSController.
ComputeEngine – выполняется в процессе работы пользовательской программы, зависит только от Client и сервера. Должен предоставлять пользователю возможности установки задачи, получение результатов синхронно и асинхронно. Работает вычислитель только при запущенном CRDS. Количество устанавливаемых задач равна одному, для дополнительных задач необходимо создать новый объект класса ComputeEngine. Важной задачей является обеспечить гарантию
выполнимости поставленной задачи, за исключением случаев обнаружения ошибок в программном коде пользователя или возникновением сбоя выполняемой среды.
CRDSController – выполняется в процессе работы пользовательской программы, зависит только от компоненты CRDS. Должен выполнять команды пользователя для изменения или получения состояния системы CRDS. При ошибках со стороны пользователя или CRDS должен
проинформировать пользователя и не допустить введения изменений в систему.