380
ПЕРСОНАЛЬНЫЙ АССИСТЕНТ С ГОЛОСОВЫМ УПРАВЛЕНИЕМ НА ОСНОВЕ МОБИЛЬНОГО УСТРОЙСТВА 
2. ПРОЕКТНАЯ ЧАСТЬ 
2.3. Разработка Android - приложения 
----------
Для начала, после создания проекта в первую очередь надо создать макет приложения, как оно будет выглядеть на устройстве после его активации. На первое время нам нужен ишь черновой вариант, потому, особо не приукрашивая внешний вид, просто добавим кнопку для начала распознавания и несколько элементов для вывода результатов. Таким образом начальный макет-шаблон будет выглядеть так, как показано на рисунке 6.
Рисунок 6 – образец начального макета Android – приложения
Рассмотрим необходимые нам классы для реализации дальнейшего кода программы:
* android.content.ActivityNotFoundException – класс выдает исключение в том случае, когда невозможен вызов запрашиваемого Activity;
* android.content.ContentResolver – класс предоставляет доступ к содержимому устройства;
* android.content.Intent – класс позволяет использовать намерения, которые передают задание новых событий в приложении и внешних программах;
* android.database.Cursor – интерфейс, который обеспечивает доступ к результирующему набору с помощью запроса к базе данных;
* android.net.Uri – класс позволяет использовать идентификатор, определяющий некоторый абстрактный или физический ресурс;
* android.os.Bundle – хранит любые примитивные типы, а так же
String и другие типы наследующие класс Parcel или интерфейс Parcelable, после чего позволяет по ключу обращаться к ним:
* android.provider.CalendarContract – через этот класс получаем разрешение на использование данных календаря из приложения;
* android.provider.ContactsContract – через этот класс получаем разрешение на использование данных о контактах в телефонной книге из приложения;
* android.speech.RecognizerIntent – класс включает поддержку распознавания речи для запуска через Intent;
* android.support.v7.app.AppCompatActivity – базовый класс для Activity;
* android.telephony.SmsManager – класс управляет smsоперациями, такими как отправка данных или сообщений;
* android.view.View – класс является основой построения пользовательского интерфейса;
* android.widget.ImageButton – класс позволяет отображать кнопку в виде картинки, которую пользователь может нажать;
* android.widget.TextView 	– 	позволяет 	отображать 	текст пользователю и, при необходимости, редактировать его;
* android.widget.Toast – отображает пользователю краткий текст, например ошибку;
* java.util.ArrayList – массив с изменяемым значением для создания списка в интерфейсе;
* java.util.GregorianCalendar – грегорианский календарь является подклассом календаря, который отвечает за стандартный ид календаря, используемый в большинстве стран мира;
* java.util.Locale – объект представляет собой какую-то определенную географическую, политическую или культурную область.
Помимо импорта данных классов в манифесте приложения так же надо внести некоторые исправления, а именно прописать доступ приложения к внутренним функциям устройства:
* чтению 	и 	записи 	в 	календаре
(android:name="android.permission.READ_CALENDAR" android:name="android.permission.WRITE_CALENDAR");
* набору 	и 	отправке 	смс
(android:name="android.permission.SEND_SMS");
* телефонной 	книге
(android:name="android.permission.READ_CONTACTS");
* набору 	телефонного 	номера
(android:name="android.permission.CALL_PHONE").
Внеся данные изменения можно переходить к непосредственной реализации самого android-приложения.