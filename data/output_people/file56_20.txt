285
МОДЕЛИРОВАНИЕ И ВИЗУАЛИЗАЦИЯ РАЗЛИЧНЫХ СТРАТЕГИЙ SLAM С ПОМОЩЬЮ LIDAR В ПОМЕЩЕНИЯХ ДЛЯ МОБИЛЬНЫХ РОБОТОВ 
3 Реализованный метод 
3.2 Реализация 
3.2.1 Перемещение робота 
----------
Для того, чтобы робот совершил поворот необходимо повернуть его точки относительно центральной. Так как робот имеет форму квадрата, то повернуть следует только точки, расположенные на углах. Для этого был реализован класс Mechanic который содержит в себе ключевые точки робота, и  точки, обозначающие переднюю часть робота, то есть в каком направлении робот должен двигаться. Чтобы робот мог перемещаться по среде был реализован метод, который позволяет роботу двигаться вперед, робот не может двигаться вправо, он может повернуться на 90 градусов, например, и проехать прямо. Для того чтобы робот мог таким образом двигаться необходимо найти нормированный вектор и сместить робота вперед. Реализация нахождения нормированного вектора [13]:
static public PointF nvec (PointF dot1, PointF dot2) {             float x = dot1.X - dot2.X;             float y = dot1.Y - dot2.Y;
float length = (float)Math.Sqrt(x * x + y * y);             PointF tmp = new PointF(x / length, y / length);             return tmp;}
Где 	dot1, 	dot2 	точки 	между 	которыми 	необходимо 	найти
нормированный вектор. Чтобы найти нормированный вектор необходимо найти расстояние между точками и поделить вектор на расстояние.
Таким образом прибавляя данный вектор к каждой точке текущего положения робота робот будет двигаться вперед относительно передней части.
Реализация поворота точки относительно другой на указанное количество градусов [13]:
static public PointF Turndot (PointF dot, PointF centr, double angle){             angle = DegreeToRadian(angle);             float xt = dot.X;
dot.X = centr.X + (dot.X - centr.X) * (float)Math.Cos(angle) -
(dot.Y - centr.Y) * (float)Math.Sin(angle);             dot.Y = centr.Y + (dot.Y - centr.Y) * (float)Math.Cos(angle) + (xt - centr.X) * (float)Math.Sin(angle);
return dot;}
Где dot точка, которую поворачиваем относительно точки centr на angle градусов. Метод DegreeToRadian переводит градусы в радианы. Для того чтобы повернуть точки пользуемся матрицей поворота в двумерном пространстве. Для того чтобы повернуть робота необходимо повернуть каждую его точку.