426
РАЗРАБОТКА ПРОГРАММНЫХ МОДУЛЕЙ ДЛЯ ВИРТУАЛЬНОЙ ЛАБОРАТОРИИ ИССЛЕДОВАНИЯ МОБИЛЬНЫХ AD HOC СЕТЕЙ 
3 Клиент-сервер 
3.2 Сервер TCP 
----------
TCP, или Transmission Control Protocol, используется как надежный протокол, обеспечивающий взаимодействие через взаимосвязанную сеть компьютеров. TCP проверяет, что данные доставляются по назначению и правильно.
TCP — это ориентированный на соединения протокол, предназначенный для обеспечения надежной передачи данных между процессами, выполняемыми  или на одном и том же компьютере или на разных компьютерах. Термин “ориентированный на соединения" означает, что два процесса или приложения прежде чем обмениваться какими-либо данными должны установить TCPсоединение. В этом TCP отличается от протокола UDP, являющегося протоколом “без организации соединения”, позволяющим выполнять широковещательную передачу данных неопределенному числу клиентов.
В данной работе в качестве протокола коммуникации между клиентом и сервером используется TCP, чтобы обеспечить упорядоченные, надежные двусторонние потоки байтов. Рассмотрим структуру работы сервера, изображенную на рисунке 15.
Рисунок 15 – Функциональная диаграмма структуры сервера
На первом шаге необходимо выполнить установление локальной конечной точки для сокета. Прежде чем открывать сокет для ожидания соединений, нужно подготовить для него адрес локальной конечной точки. Уникальный адрес для обслуживания TCP/IP определяется комбинацией IPадреса хоста с номером порта обслуживания, которая создает конечную точку для обслуживания. После того как адрес локальной конечной точки будет подготовлен, можно выполнять открытие сокета. Следующим шагом должно быть назначение сокета с помощью метода Bind().Для сокета открытого с помощью конструктора резервируется дескриптор, но не назначается имя.
Чтобы сокет клиента мог идентифицировать потоковый сокет TCP, серверная программа должна назначить имя своему сокету. Метод Bind() связывает сокет с локальной конечной точкой. Вызов метода Bind() должен быть выполнен строго до любых вызовов методов Listen() и Accept().
После создания сокета и назначение ему имени, можно выполнять прослушивание входящих соединений используя метод Listen().В состоянии прослушивания сокет будет ожидать входящие попытки соединения. Метод Accept() извлекает из очереди ожидающих запросов первый запрос на соединение и создает для его обработки новый сокет. Новый сокет создан,но первоначальный сокет продолжает слушать и может использоваться с многопоточной обработкой для приема нескольких запросов на соединение от клиентов.Согласно клиент-серверной архитектуре, сокет выполняющий прослушивание соединений должен продолжать работу наряду с сокетами, созданными методом Accept().
Как только клиент и сервер установили между собой соединение, можно отправлять и получать сообщения, используя методы Send() и Receive() класса Socket. Метод Send() записывает исходящие данные сокету, с которым установлено соединение. Метод Receive() считывает входящие данные в потоковый сокет. При использовании системы, основанной на TCP, перед выполнением методов Send() и Receive() между сокетами должно быть установлено соединение.
Точный протокол между двумя взаимодействующими сущностями должен быть определен заблаговременно, чтобы клиентское и серверное приложения не блокировали друг друга, не зная, кто должен отправить свои данные первым.
Вызов метода Close() должен быть выполнен после того как обмен данными между сервером и клиентом будет завершен. [Кровчик Э. Net. Сетевое программирование для профессионалов с.176]