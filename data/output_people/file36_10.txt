396
РАЗРАБОТКА СИСТЕМЫ МОДЕЛИРОВАНИЯ AD HOC СЕТЕЙ В НЕВЫПУКЛЫХ ОБЛАСТЯХ 
4 Программирование для мобильных платформ 
4.2 Архитектурный паттерн MVP 
----------
Архитектурные шаблоны являются важнейшей частью ПО. Они помогают сохранить код в чистоте, сделать его расширяемым и тестируемым. Шаблон MVP позволяет отделить уровень представления от уровня логики, для того что бы поведение приложения не зависело от его конкретного внешнего вида.  Android не определяет зоны ответственности между компонентами приложения, поэтому вся логика работы с UI и данными приложения описана внутри одной Activity, что не позволяет сделать приложение расширяемым и легко тестируемым. Использование MVP позволяет решить эту проблему. Есть много разных подходов для реализации MVP, но не зависимо от выбранного решения должны сохранятся три компонента:
1.  Presenter выступает в качестве посредника между View и Model. Он извлекает данные из модели и передает их во View. Но в отличие от типичного MVC, он также решает, что нужно делать, когда вы взаимодействуете с View.
Презентер отвечает за:
* Загрузку моделей;
* Сохранение ссылки на модель и состояния представления;
* Форматирование того, что должно быть отображено на экране, и указание представлению отобразить это;
* Определение необходимых действий, когда получены входные события от представления.
2.  View, как правило, реализуется в Activity и Fragment, которые содержат ссылку на презентер. Единственное, что делает View, это вызывает методы презентера при каком-либо действии пользователя.
Представление отвечает за:
* Создание 	экземпляра 	презентера 	и 	механизм 	его присоединения/отсоединения;
* Оповещение презентера о важных для него событиях жизненного цикла;
* Сообщение презентеру о входных событиях;
* Размещение представлений и соединение их с данными;
* Анимации;
* Отслеживание событий;
* Переход на другие экраны
3.  Model рассматривается в качестве поставщика данных, которые будут отображаться во View. Модель — это набор бизнес-логики.
Рисунок 4 – взаимодействие компонентов приложения в MVP
Также использование паттерна MVP почти полностью решает вопрос с сохранение состояния активити при ее пересоздании. В традиционном подходе все данные хранятся в активити, а при пересоздании активити она разрушается и данные теряются. В паттерне MVP активити не хранит никаких данных. При создании активити в первый раз создается презентер для нее. Когда представление доступно для взаимодействие, презентер прикрепляется к активити, когда недоступно – открепляется. Тем самым избавляя приложения от главных проблем – утечек памяти, сохранения данных и привязки асинхронных операций к активити. Как известно, в ОС Android асинхронная задача AsyncTask имеет неявную ссылку на активити, ее запустившую и при после пересоздания активити AsyncTask хранит ссылку на несуществующую активити и в итоге результат асинхронной операции придет в никуда и случится утечка памяти.  С приходом MVP эта проблема также решена. Можно запускать асинхронные операции в модели.