657
РАСПРЕДЕЛЕННАЯ ANDROID-СИСТЕМА «АССИСТЕНТ ПРЕПОДАВАТЕЛЯ» 
3 Программная реализация приложения КубГУ Assistent 
3.12 Добавление/редактирование расписания . 
----------
Для реализации страницы с добавлением/ изменением расписания была использована технология Ajax.
Ajax — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате, при обновлении данных вебстраница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее.
Если бы технология Ajax не использовалась, то процесс создания и изменения расписания был бы следующим:
а) пользователь заходит на веб-страницу заполняет расписание на
определенный день и нажимает на кнопку сохранения;
б) браузер формирует и отправляет запрос серверу;
в) в ответ сервер генерирует совершенно новую веб-страницу и отправляет её браузеру, после чего браузер полностью перезагружает всю страницу.
Огромным минусом описанного подхода является тот факт, что сервер может сгенерировать новую страницу с сообщением о какой-либо ошибке, а это значит, что все введенные ранее данные необходимо будет ввести снова. Исходя из этого и был выбран Ajax, который помогает избежать данной проблемы. С использованием Ajax процесс редактирования расписания выглядит следующим образом:
а) пользователь заходит на веб-страницу заполняет расписание на
определенный день и нажимает на кнопку сохранения;
б) скрипт (на языке JavaScript) определяет, какая информация
необходима для обновления страницы;
в) браузер отправляет соответствующий запрос на сервер;
г) сервер возвращает только ту часть документа, на которую пришёл
запрос;
д) Скрипт вносит изменения с учётом полученной информации (без
полной перезагрузки страницы).
Таким образом, если использовать вторую описанную схему, то при наличии ошибки в введенных данных или ошибки на сервере, пользователю не нужно будет вводить все данные заново, а достаточно внести исправления в уже введенные и повторно нажать на кнопку сохранения.
Два описанных метода можно сравнить с помощью следующей схемы (рисунок 12):
Рисунок 12 - Сравнение модели без использования Ajax и с применением данной технологии
Подход с использованием Ajax сложнее в реализации, но он позволяет избавиться от главной проблемы и сделать использование панели управления удобным.
При переходе в редактор расписания, пользователю будет доступна следующая форма (рисунок 13):
Рисунок 13 - Форма редактора расписания
В данной форме пользователю предлагается заполнить следующий данные: группа, подгруппа и день недели.
Выбор группы осуществляется из выпадающего списка, данные в который загружаются из базы данных при загрузке страницы. Данные о группах хранятся в таблице groups (рисунок 14).
Рисунок 14 - Архитектура таблицы groups
При выборе группы и вводе обозначения подгруппы (может быть использован, как числовой формат, так и буквенный), необходимо выбрать день недели, для которого будет производится редактирование. При выборе дня недели автоматически вызывается функция, реализованная с помощью JavaScript и использующая технологию Ajax:
function load_schedule()
{
var sub = $("#subgroup").val().trim();             var grp = $("#number_group").val().trim();             var day = $("#week_day").val().trim();
$.ajax
({
url: "handler/get_schedule.php",                 type: "POST",                 data: {group:grp, subgrpoup:sub, day:day},                 success: function(data)
{
$("#ajaxDiv").html(data);
}             });             return false;
}
По приведенному фрагменту кода видно, что данные заполненные данные отправляются в файл get_schedule.php, который возвращает ответ – расписание по предоставленным данным в формате JSON. Расписание загружается из таблицы lesson. Таким образом, после получения ответа и парсинга JSON страница примет следующий вид (рисунок 15):
Рисунок 15 - Заполненная форма редактора расписания
При нажатии на кнопку “Сохранить изменения” будет так же выполнены Ajax запрос, который добавит данные в таблицу lesson:
$.ajax
({
url: "handler/save_schedule.php",                 type: "POST",                 data: {group:grp, subgroup:sub, day:day, les1: les1, les2: les2,les3: les3,les4: les4,les5: les5,les6: les6,les7: les7,les8: les8, teach1: teach1, teach2: teach2, teach3: teach3, teach4: teach4, teach5: teach5, teach6: teach6, teach7: teach7, teach8: teach8, comment1: comment1, comment2: comment2, comment3: comment3, comment4: comment4, comment5: comment5, comment6: comment6, comment7: comment7, comment8: comment8, type1: type1, type2: type2, type3: type3, type4: type4, type5: type5, type6: type6, type7: type7, type8: type8},                 success: function(data)
{                     alert(data);
}             });
Таблица lesson имеет следующую архитектуру (рисунок 16):
Рисунок 16 - Архитектура таблицы lesson
В спроектированной и разработанной базе данных данные хранятся таким образом, что каждая таблица имеет компактный вид и является масштабируемой и легко изменяемой, при этом не мешая запросам пользователей и выборке данных. Данные в таблицах заполняются из других таблиц с помощью связей. Например, рассматриваемая таблица lesson содержит в себе данные из трех других таблиц.
Рисунок 17 - Связи таблицы lesson
Подобный подход позволяет значительно уменьшить количество таблиц на сервере, объем занимаемой памяти и максимально структурировать базу данных.