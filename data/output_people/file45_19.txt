1231
РАЗРАБОТКА РАСПРЕДЕЛЕННОЙ СИСТЕМЫ ИСПОЛЬЗОВАНИЯ УДАЛЕННЫХ ВЫЧИСЛИТЕЛЬНЫХ РЕСУРСОВ 
2 Разработка распределенной вычислительной системы . 
2.4 Реализация . 
2.4.5 Тестирование . 
----------
Тестирование системы CRDS проводилось на реальных устройствах, которых было 4. Первый компьютер выступал в качестве раздающего задачи, т.е. в роли клиента. Остальные устройства использовались для выделения под задачи серверов. Для удобства обозначим компьютеры, принимавшие участие в тестировании, узлами. Так, узел 1 – это клиент, который связан с узлами 2 и 3 через локальную сеть с помощью экранированной витой пары 3 категории, пропускная способность которой составляет 100Мбит/c с частотой 16МГц.
Узлы 1, 2 и 3 соединены локальной сетью с помощью маршрутизатора. Узел 4 соединён с узлом 1 через интернет, пропускная способность которого, со стороны первого узла – 50Мбит/с, а со стороны второго 36Мбит/c.
Технические характеристики узлов: а) Узел 1.
1)  Процессор: Intel Core i3-2328M 2.2GHz, 2 ядра, 64 разрядный.
2)  Память: 4Gb.
3)  Операционная система: Windows 10 x64.
4)  Адрес в локальной сети: 192.168.1.1.
б) Узел 2.
1)  Процессор: Intel Core Duo E7200 2.53GHz, 2 ядра, 32 разрядный.
2)  Память: 2Gb.
3)  Операционная система: Windows 7 x84.
4)  Адрес в локальной сети: 192.168.1.2.
в) Узел 3.
1)  Процессор: Intel Core i5 3230M 2.6GHz, 2 ядра, 64 разрядный.
2)  Память: 4Gb.
3)  Операционная система: Windows 10 x64.
4)  Адрес в локальной сети: 192.168.1.3.
г) Узел 4.
1)  Процессор: Intel Pentium D 2.2GHz, 2 ядра, 64 разрядный.
2)  Память: 4Gb.
3)  Операционная система: Windows 7 x64.
4)  Адрес в глобальной сети: 212.15.211.3.
Для тестирования была написана программа на Java в виде класса Test, который запускался через командную строку с параметром, определяющим количество задач выделяемые для тестирования.
В качестве задачи выступает, реализующий интерфейс Task, класс Permutation, который выполняет следующие задачи:
а) Принимает на вход конструктора строку symbols, служащую алфавитом, и число len – размер генерируемой строки str.
б) Первоначально строка str состоит из len первых символов алфавита
symbols.
в) Производится перебор всевозможных строк. Для этого берется каждый символ строки и изменяется на символ, который стоит в алфавите после него, тем самым полученная строка приравнивается к str. Процесс продолжается, пока рассматриваемый символ не будет являться последним в алфавите symbols, после чего осуществляется такой же перебор следующего символа строки str. Функция выполняется пока не будет получена строка, у которой все символы равны последнему символу алфавита symbols. В конце работы алгоритма выводится время, затраченное на его выполнение в миллисекундах.
Программа Test запускает на выполнение задачу Permutation указанное количество раз, при этом для каждой задачи создается экземпляр класса ComputeEngine, который передает её системе CRDS. Система CRDS принимает задачи и распределяет между узлами 2-4.
Для тестирования программа Test была запущена со следующими параметрами:
* java –jar test.jar 1 – требуется распределить 1 задачу;
* java –jar test.jar 3 – требуется распределить 3 задачи;
* java –jar test.jar 6 – требуется распределить 6 задач;
* java –jar test.jar 12 – требуется распределить 12 задач.
Перед каждым запуском у систем CRDS на узлах 2-4 были изменены параметры, таким образом, чтобы во время второго теста – каждый узел получил одну задачу, третий тест – 2 задачи на узел и 4 задачи на узел во время четвертого теста.
Первый тест выполнен с целью продемонстрировать работу системы через сеть интернет. Таким образом узел 1 передает через интернет задачу узлу 4 и принимает результат. Запуск и завершение программы Test с параметром 1 на первом узле продемонстрирован на рисунке 8, данные выводимые системой CRDS на узле 4 изображены на рисунке 9.
Рисунок 8 – Результат работы программы Test с параметром 1
Рисунок 9 – Работа программы CRDS на узле 4 во время запуска программы Test с параметром 1
Также перед запуском первого теста система CRDS была запущена на узле 1 через командную строку (Рисунок 10), что сделал и пользователь узла 1 (Рисунок 9). Таким образом имеется возможность наблюдать за сообщениями системы CRDS.
Как мы видим из рисунков 8-10 тест прошел успешно. При этом система узла 1 соединилась с менеджером серверов узла 4 по адресу 212.15.211.3:58599. После чего задача Permutation по завершению своей работы вывела сообщение 3105086 – количество миллисекунд, затраченных на выполнение задачи. Это сообщение было перехвачено и выведено ProcessController-ом системы узла 4.
Рисунок 10 – Работа системы CRDS во время запуска программы Test с
параметром 1
На стороне клиента программа Task вывела сначала время задачи, выполненной на узле 1 – это 3458274 миллисекунд, после чего ожидала завершения работы сервера. По завершению работы общее время работы программы составило 3599227 миллисекунд. Вывод – благодаря системе CRDS и инструменту ComputeEngine пользователь узла 1 решил примерно за
час две задачи, суммарное время выполнения которых 6 704 313 миллисекунд или 111 минут.
Скриншоты работы программы CRDS узлов 1-4 во время тестов 2-4 не указаны в данном контексте, в следствие большого объема информации выводимой системой. Однако, результаты работы каждого сервера были зафиксированы.
После проведения тестов 2-4, результаты тестов показаны на рисунках 11-16. Состоящих из скриншота работы программы Test и диаграммы
времени выполнения задач на серверах каждого узла.
Рисунок 11 – Скриншот работы программы Test с параметром 3
0
1000000
2000000
3000000
4000000
узел 1
узел 2 сервер 1
узел 3 сервер 1
узел 4 сервер 1
узел 1 всего
Тест 1
Рисунок 12 – Диаграмма времени выполнения задач на разных узлах в миллисекундах после запуска программы Test с параметром 3
После выполнения второго теста система показала результаты, указанные на диаграмме рисунка 12, узел 1 – это данные по работе алгоритма Permutation на компьютере программы пользователя, а узел 1 всего – общее время работы программы Test. В таком случае, на системах CRDS узлов 2-4 был выделен только один сервер, каждый из которых был зарезервирован клиентом узла 1 и получил задачу. В результате программа Task выполнила 4 задачи Permutation за время, сопоставимое выполнению одной задачи.
В данном тесте, учитывая особенности выполнения программ в JVM, сервера узлов 2-4 использовали около 400 Мбайт памяти и 25-35% процессорного времени. Такие настройки системы (выделение одного сервера) не мешают пользователю во время работы с другими приложениями.
Для того, чтобы проверить, как система будет расходовать ресурсы компьютер, была увеличена нагрузка увеличением количества серверов узлов в тестах   3 и 4, результаты которых представлены в виде диаграмм, которые изображены на рисунках 14 и 16.
Рисунок 13 - Скриншот работы программы Test с параметром 6
0
1000000
2000000
3000000
4000000
5000000
узел 1
узел 2 сервер 1
узел 2 сервер 2
узел 3 сервер 1
узел 3 сервер 2
узел 4 сервер 1
узел 4 сервер 2
узел 1 всего
Тест 2
Рисунок 14 – Диаграмма времени выполнения задач на разных узлах в миллисекундах после запуска программы Test с параметром 6
Из проведенного третьего теста следует вывод, что при увеличении числа принимаемых задач программой CRDS, вычисления серверами будут проводится медленно, так среда Java автоматические управляет распределением процессорного времени среди запущенных ей программ. Таким образом процессор для каждого сервера был загружен на 15-25% и расходовал около 400 Мбайт памяти.
Рисунок 15 - Скриншот работы программы Test с параметром 6
Рисунок 16 – Диаграмма времени выполнения задач на разных узлах в миллисекундах после запуска программы Test с параметром 12
Вывод полученный после проведения третьего теста был подтвержден результатами четвертого теста. Несмотря на то, что задачи в четвертом тесте выполнялись гораздо медленнее (загрузка процессора 6-12%), результат полученный пользователем узла 1 был вычислен быстрее, чем если он был получен вычислением 13 задач на одном компьютере. Данный результат демонстрирует преимущества распределенных систем, как систем предоставляющих вычислительную мощность. И даже в случае использования четырех серверов, пользователь не почувствует дискомфорта при работе за компьютером.
На этом этап тестирования программы завершен, после которого можно сделать вывод, что разработанная программа выполняет поставленные перед ней задачи, а распределенная система обеспечивает бесперебойную работу и наименьшую нагрузку (за исключением использования оперативной памяти).
Исходные коды программ Test и Permutation используемых в тесте, приведен в ПРИЛОЖЕНИЕ B.