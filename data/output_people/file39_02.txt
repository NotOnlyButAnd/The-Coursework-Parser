791
Разработка системы безопасности веб-сайта
1 Безопасность веб-сайта 
1.1 Защита от SQL-инъекций 
----------
Многие веб-разработчики даже не догадываются, что SQL-запросы могут быть подделаны, и считают, что SQL-запросы всегда достоверны. На самом деле поддельные запросы могут обойти ограничения доступа, стандартную проверку авторизации, а некоторые виды запросов могут дать возможность выполнять команды операционной системы.
Прямое внедрение вредоносных инструкций в SQL-запросы - это методика, в которой взломщик создает или изменяет текущие SQLзапросы для отображения скрытых данных, их изменения или даже выполнения опасных команд операционной системы на сервере базы данных. Атака выполняется на базе приложения, строящего SQL-запросы из пользовательского ввода и статических параметров.
Благодаря отсутствию проверки пользовательского ввода и соединению с базой данных под учетной записью суперпользователя (или любого другого пользователя, наделенного соответствующими привилегиями), взломщик может создать еще одного пользователя БД с правами суперпользователя.
Хотя по-прежнему очевидно, что взломщик должен обладать, по крайней мере, некоторыми знаниями о структуре базы данных, чтобы провести успешную атаку, получить эту информацию зачастую очень просто. Например, если база данных является частью open-source или другого публично доступного программного пакета с инсталляцией по умолчанию, эта информация является полностью открытой и доступной. Эти данные также могут быть получены из закрытого проекта, даже если он закодирован, усложнен, или скомпилирован, и даже из вашего личного кода через отображение сообщений об ошибках. К другим методам относится использование распространенных (легко угадываемых) названий таблиц и столбцов [1].
Из всего сказанного можно, наконец, сформулировать определение инъекции.
SQL-инъекции - это способ хакерской атаки, когда передаваемые
скрипту данные модифицируются таким образом, что запрос, формируемый в этом скрипте, начинает выполнять совсем не то, для чего он предназначался [6].
Правила защиты от таких атак можно разделить на два пункта:
* Работа с данными (не помещать в базу данных данные без обработки);
* Работа с управляющими элементами запроса (не помещать в запрос управляющие структуры и идентификаторы, введенные пользователем, а заранее прописывать в скрипте список возможных вариантов, и выбирать только из них).
Что касательно второго пункта, то тут все понятно: не следует помещать в запрос различные if, else и так далее. Поэтому следует поподробнее рассмотреть правила, относящие к первому пункту.
При подстановке строковых данных в запрос, следует придерживаться двух правил:  все вставляемые строковые данные должны быть заключены в кавычки (одинарные или двойные, но удобнее и чаще используются одинарные).   в них должны быть экранированы слешами спецсимволы.
К примеру, если написать «SELECT * FROM table WHERE name =
Bill», то база решит, что Bill - это имя другого поля, не найдёт его, и выдаст ошибку. Поэтому подставляемые данные (в данном случае имя Bill) надо заключать в кавычки - тогда база сочтет его строкой, значение которой надо присвоить полю name: «SELECT * FROM table WHERE name
= 'Bill'».
Однако и в самих данных могут встречаться кавычки тоже. К примеру, «SELECT * FROM table WHERE name = 'Д'Артаньян'».
Здесь база данных решит, что 'Д' - это данные, а Артаньян - команда, которую она не знает, и тоже выдаст ошибку. Поэтому и надо прослешивать все данные, чтобы объяснить базе, что встречающиеся в них кавычки (и некоторые другие спецсимволы) относятся к данным.
В результате мы получим правильный запрос, который ошибок не вызовет: «SELECT * FROM table WHERE name = 'Д\'Артаньян'».
Всё вышесказанное относится к данным строкового типа и датам. Числа можно вставлять, не прослешивая и не окружая кавычками. Если вы так делаете, то обязательно приводите данные к нужному типу перед вставкой в запрос (например, $id=intval($id)).
Однако для простоты и надёжности можно и с числами работать, как со строками (поскольку MySQL всё равно преобразует их к нужному типу). Соответственно, мы будем любые данные, вставляемые в запрос, прослешивать и заключать в кавычки [7].
Так же, есть ещё одно правило - необязательное, но его следует придерживаться во избежание появления ошибок:
Имена полей и таблиц следует заключать в обратные одинарные кавычки - "`" (клавиша с этим символом находится на стандартной клавиатуре слева от клавиши "1") Ведь имя поля может совпадать с ключевыми словами MySQL, но если мы используем обратную кавычку, то MySQL поймёт всё правильно: «SELECT * FROM `table` WHERE `date` = '2006-04-04'».
Следует различать эти кавычки и не путать одни с другими. Следует также помнить, что обратные кавычки слешами не экранируются.
Пойдем далее. Один из самых популярных способов отправлять запросы в БД называется "подготовленными выражениями" (prepared statements).
Суть его заключается в том, что подготавливается шаблон запроса, со специальными маркерами, на место которых будут подставлены динамические компоненты. Пример такого шаблона: «SELECT * FROM table WHERE name=?».
Знак вопроса здесь - это тот самый маркер. По-другому он называется плейсхолдером (placeholder). Весь секрет в том, что данные на его место подставляет специальная функция, которая "привязывает" переменную к запросу.
Вот как выглядит код в таком случае:
$stmt = $mysqli->prepare("SELECT District FROM City WHERE Name=?");
$stmt->bind_param("s", $city);
$stmt->execute();
В первой строчке мы подготавливаем шаблон запроса.
Во второй - привязываем к маркеру значение переменной $city.
В третьей строчке выполняем подготовленный таким образом запрос.
При этом запрос и данные идут в базу не вместе, а по отдельности, исключая возможность какой-либо ошибки или злонамеренной манипуляции.