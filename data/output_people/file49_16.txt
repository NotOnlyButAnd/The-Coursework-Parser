875
РАЗРАБОТКА МОБИЛЬНОГО ПРИЛОЖЕНИЯ МНОГОЗВЕННОЙ АРХИТЕКТУРЫ НА БАЗЕ ОПЕРАЦИОННОЙ СИСТЕМЫ ANDROID
3 Мобильное приложение для ОС Android 
3.2 Активности приложения 
3.2.4 Чат с куратором и интерфейс Pusher 
----------
Активность чата с куратором представляет собой окно диалога авторизированного в приложении пользователя с назначенным ему куратором на выбранном уровне развития. На активность чата пользователь переходит из активности главного экрана уровня развития с помощью нажатия на кнопку «написать куратору», которая находится в блоке текущего задания пользователя.
Активность описана в файле ChatActivity.java. Состоит из прокручиваемого вертикально блока (ListView), содержащего отправленные
сообщения между собеседниками, поля для ввода сообщения для отправления (EditText) и кнопки отправления введенного сообщения. Макет активности чата с куратором описан в файле activity_chat.xml. Внешний вид активности чата с куратором изображен на рисунке 15.
Рисунок 15 – Активность чата с куратором
Каждое сообщение блока отправленных сообщений является объектом вспомогательного созданного класса ChatMessage.java и представляет собой отдельный блок, содержащий в себе информацию об имени отправителя сообщения, времени и дате отправления сообщения и сам текст сообщения.
Сам блок отправленных сообщений принимает в качестве параметра адаптер сообщений, описанный во вспомогательном созданном классе ChatArrayAdaper.java. Адаптер берет предоставленные ему сообщения и размещает их в списке по порядку. При этом адаптер в своем теле создает необходимые для отображения компоненты, а именно всю информацию о сообщении, и помещает в них подготовленный текст.
Для удобства использования чата необходимо, чтобы активность чата с куратором обновлялась и добавляла новые передаваемые сообщения в реальном времени. Для этого использовался интерфейс Pusher.
Pusher – простой и удобный программный интерфейс приложения для быстрой, легкой и надежной интеграции возможностей работы в реальном времени с помощью веб-сокетов в веб-приложения, мобильные приложения или любое другое устройство, имеющее доступ в сеть Интернет. Веб-сокеты, используемые в работе данного программного интерфейса, уникально идентифицируют приложение и обеспечивают двунаправленную связь с приложением с минимальным использованием данных.
Интерфейс Pusher располагает богатым набор библиотек, которые можно использовать при разработке продукта. Здесь используется абстракция, основанная на мгновенных событиях, которая упрощает привязку пользовательского интерфейса к событиям, которые исполняются с любого клиента или сервера.
Главная 	идея 	программного 	интерфейса 	Pusher 	– 	модель
публикаций/подписок с использованием каналов, что позволяет фильтровать и управлять отправляемыми запросами. Также поддерживаются механизмы аутентификации для частных каналов и отслеживания тех пользователей, кто сейчас эти каналы прослушивает.
Таким образом, интерфейс Pusher является крайне удобным для реализации чата в реальном времени, так как пользователи при общении могут мгновенно получать сообщения друг от друга, не обновляя ничего вручную и используя при этом минимальное количество данных.
Для 	начала 	работы 	с 	интерфейсом 	Pusher 	необходимо
зарегистрироваться на официальном сайте данного программного интерфейса и далее зарегистрировать приложение в личном кабинете. После этого выдаются реквизиты или токены, необходимые для подключения к каналу прослушивания интерфейса Pusher. В токены входят уникальный идентификатор зарегистрированного приложения, уникальный ключ доступа, секретный ключ и кластер, то есть регион, куда будут посылаться запросы на обработку событий.
Для операционной системы Android инициализация канала прослушивания в приложении с помощью интерфейса Pusher выглядит следующим образом:
PusherOptions options = new PusherOptions(); options.setCluster("eu");
Pusher pusher = new Pusher(/*уникальный ключ доступа*/, options); Channel channel = pusher.subscribe(/*канал прослушивания*/); channel.bind(/*событие*/, new SubscriptionEventListener() {
@Override
public void onEvent(String channelName,
String eventName, final String data) {
System.out.println(data);
} });
pusher.connect();
Сначала указываются опции, необходимые для подключения. В данном случае указывается регион eu – Европа. Создается экземпляр класса Pusher, который принимает в качестве параметров уникальный ключ доступа и объявленные опции. Затем создается экземпляр класса Channel, которые характеризуется подпиской на определенный канал прослушивания, и, наконец, регистрируется событие для прослушивания на обозначенном канале прослушивания.
В разработанном приложении чат представляет собой индивидуальное общение пользователя с назначенным ему куратором. По каждому уровню развития свой отдельный чат. Поэтому для уникального обозначения канала прослушивания событий используются два параметра: логин пользователя и уровень развития. Например, логин пользователя – user1, уровень развития – материальный, следовательно, канал прослушивания будет носить название, messages_user1_material. Тогда к этому каналу будет иметь доступ этот пользователь и куратор, прикрепленный к пользователю по данному уровню развития.
Каждый раз при переходе на определенном уровне развития на активность чата с куратором будет производиться подключение к каналу прослушивания с уникальным обозначением, характерным для этого пользователя и уровня. Далее на сервер базы данных отправляется запрос, в результате которого подгружаются последние сообщения, отправленные между текущим пользователем и его куратором. В каждом сообщении указывается информация об имени отправителя сообщения, времени и дате отправления сообщения и сам текст сообщения.
Главное событие, которое обрабатывается интерфейсом Pusher в разработанном приложении, является событие new_message, обозначающее отправление нового сообщения со стороны пользователя или куратора в чат между ними. Как только сообщение было отправлено с любой стороны, оно переправляется на сервер для обработки, в ходе которой сообщение заносится в базу данных с параметрами:
* текущий уровень развития (physical, material, social, spiritual);
* id пользователя;
* id прикрепленного к пользователю куратора по данному уровню развития;
* id отправителя (пользователь или куратор отправил сообщение);
* текст сообщения;
* время и дата отправления сообщения.
Далее на сервере создается объект класса Pusher для обозначения канала прослушивания, на который отправляется основная информация о сообщении, а именно имя отправителя сообщения, текст сообщения и время и дата отправления сообщения. После чего создается событие интерфейса Pusher, которое принимает в качестве параметров имя канала прослушивания, имя события и пересылаемые данные.
$options = array(
'cluster' => 'eu',
'encrypted' => true
);
$pusher = new Pusher(
/*ключ доступа*/,
/*секретный ключ*/,
/*идентификатор приложения*/,
$options
);
$data = "";
$data["message_user"] = $message_user_name;
$data["message_text"] = $message_text;
$data["message_time"] = $message_time;
$pusher->trigger($channel_name, 'new_message', $data);
Интерфейс принимает эту информацию и мгновенно сообщает пользователю, который в данный момент прослушивает канал, о новом событии и подгружает новое сообщение на экран активности чата.
Для уменьшения объема расходуемых данных канал прослушивается только при открытой активности чата.