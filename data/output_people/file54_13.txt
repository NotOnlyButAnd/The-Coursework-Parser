1976
АРХИТЕКТУРА МОБИЛЬНЫХ РАСПРЕДЕЛЕННЫХ КОМПЬЮТЕРНЫХ СИСТЕМ, УПРАВЛЯЕМЫХ ИНТЕЛЛЕКТУАЛЬНЫМИ АГЕНТАМИ 
3 Реализация многофункционального мобильного приложения для ВУЗа 
3.3 Описание классов разработанного приложения 
----------
AuthorizationActivity – стартовый экран приложения на котором пользователь должен пройти авторизацию. Этот экран отображается, если приложение запущено в первый раз или если пользователь на данном устройстве еще не авторизовался в нашем приложении. В данном классе использовались: запрос для прохождения авторизации (AsyncAuth), запрос для получения расписания пользователя (AsyncGetScheduleTeacher или AsyncSchedule). После получения расписания оно добавляется в локальную базу данных.
AsyncAuth – класс, унаследованный от AsyncTask, для отправки данных авторизации на веб – сервер. При этом использовался алгоритм шифрования пароля пользователя (md5). Если авторизация пройдена успешно, то веб – сервер возвращает нам данные пользователя: а) id; б) фио, в) группа (подгруппа) у студента.
AsyncGetScheduleTeacher (AsyncSchedule) – класс, унаследованный от
AsyncTask, для получения расписания пользователя, который отправляет запрос на веб-сервер. Полученные данные добавляются в базу данных SQLite на устройстве пользователя. При этом от сервера возвращаются следующие данные: а) id предмета; б) название предмета; в) тип предмета (лекция или практика); г) ФИО преподавателя (для студентов) или номер группы, подгруппы (для преподавателя); д) номер пары по порядку; е) день недели; ж) номер аудитории; з) сокращенное название предмета.
ScheduleDatabaseHelper – класс для управления базой данных, в которой хранится расписание пользователя, для его отображения без интернета.
Взаимосвязь описанных выше классов отображена на рисунке 9.
+
AuthirizationActivity
-
login : EditText
-
setting : SharedPreferences
-
password : EditText
#
onCreate (saved : Bundle)
#
onResume ()
+
setListenerButton()
+
md5(s : String) : String
+
par
singAnswerStudent(answer : String)
+
parsingAnswerTeacher(answer : String)
+
installTime(num : Integer) : String
+
insertSubject(data : ArrayList)
+
AsyncSchedule
-
server : String
-
answer : String
#
doInBackground(data : Map): Boolean
+
postRequest(body : Stri
ng) : String
createBodyRequest(data: Map) : String
+
+
readAnswerServer(i:InputStream):String
+
ScheduleDatabaseHelper
-
DATABASE_VERSION : Integer
-
DATABASE_NAME : String
#
onCreate(db : SQLiteDatabase)
#
onUpgrade(db : SQLiteDatabase,
old:Integer, new:In
teger)
+
AsyncAuth
-
server : String
-
answer : String
-
status : boolean
#
doInBackground(data : Map): Boolean
+
postRequest(body : String) : String
createBodyRequest(data: Map) : String
+
+
parseAnswer(answer : String)
+
readAnswerServer(i:InputStream
):
String
+
AsyncGetScheduleTeacher
-
server : String
-
answer : String
#
doInBackground(data : Map): Boolean
+
postRequest(body : String) : String
createBodyRequest(data: Map) : String
+
readAnswerServer(i:InputStream):String
+
SQLite
TeacherAssi
stant
+
CalendarActivity
...
...
Web
Сервер
Рисунок 9 – Взаимосвязь классов между собой (фрагмент для главной Activity)
CalendarActivity – экран для отображения расписания пользователя на
выбранную дату. Данный класс использует адаптер для отображения расписания (ScheduleAdapter) и класс (Subject), который представляет собой один предмет. Расписание пользователя считывается из локальной базы данных. При нажатии на отдельную пару для студента открывается экран статистики по этому предмету, для преподавателя – список группы.
ScheduleAdapter – адаптер, унаследованный от BaseAdapter, для отображения расписания пользователя, которое содержит сокращенное название предмета, время проведения пары, номер по порядку и тип пары (лекция или практика).
Subject – класс для представления одного предмета. Данный класс содержит следующие поля: а) id предмета; б) название предмета; в) тип предмета (лекция или практика); г) номер группы, подгруппы; д) номер пары по порядку; е) время пары; ж) номер аудитории. Также данный класс имеет методы для установления значений полей и методы для получения значения полей отдельного объекта.
Взаимосвязь описанных выше классов отображена на рисунке 10. ListGroup – класс отображения списка группы, доступный только
преподавателю. Данный класс использует класс AsyncGetListGroup для отправки запроса к веб – серверу и класс ListGroupAdapter, который используется для отображения списка группы. Из этого класса можно перейти к экрану GetDateAllLessonsActivity.
ListGroupAdapter – адаптер, унаследованный от BaseAdapter, для отображения списка группы преподавателю, которое содержит номер студента по порядку, его ФИО и адрес электронной почты. При нажатии на отдельного студента открывается экран статистики посещений и заданий по данному предмету (InformationAboutSubject).
AsyncGetListGroup – класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для получения списка группы. Сервер возвращает ответ, содержащий: а) полные ФИО студента; б) сокращенные фио студента; в) адрес электронной почты студента; г) id студента.
Student – класс для представления студента. Данный класс содержит следующие поля: а) id; б) адрес электронной почты; в) полные ФИО студента; г) сокращенные ФИО студента.
Взаимосвязь описанных выше классов отображена на рисунке 11.
Рисунок 10 – Взаимосвязь классов между собой (фрагмент для Activity "Календарь")
+ InformationAboutSubject
+ GetDateAllLessonActivity
+ CalendarActivity
...
...
...
...
...
...
1
Рисунок 11 – Взаимосвязь классов между собой (фрагмент для класса ListGroup)
FullScheduleActivity - экран для отображения подробного расписания пользователя на выбранный день недели. Данный класс использует адаптер для отображения подробного расписания (FullScheduleAdapter) и класс (Subject), который представляет собой один предмет. Само расписание загружается из базы данных на устройстве пользователя. При нажатии на отдельную пару для студента открывается экран статистики по этому предмету, для преподавателя – список группы.
FullScheduleAdapter – адаптер, унаследованный от BaseAdapter, для отображения подробного расписания пользователя, которое содержит полное название предмета, время проведения пары, номер по порядку, ФИО преподавателя(для студента) или номер группы, подгруппы(для преподавателя), аудитория проведения пары и тип пары (лекция или практика).
+ InformationAboutSubject
... ...
+ ListGroup
+ CalendarActivity
... ...
... ...
Взаимосвязь описанных выше классов отображена на рисунке 12.
Рисунок 12 – Взаимосвязь классов между собой (фрагмент для Activity FullScheduleActivity)
InformationAboutSubject - экран для отображения статистики студента по определенному предмету. В данном классе можно просмотреть статистику посещений и заданий. Данный класс взаимодействует с классами, выполняющими запросы к веб – серверу (AsyncGetVisitStudent,
AsyncAcademicPerformance).
MyValueFormatter – класс, унаследованный от класса ValueFormatter из библиотеки com.github.mikephil, для отображения статистики посещений студента в виде круговой диаграммы. Данный класс выполняет запрос (AsyncStatisticsStudent) к веб – серверу для получения статистики посещений определенного студента.
AsyncGetVisitStudent – класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для получения списка дат, когда студент был на конкретной паре. Сервер возвращает ответ, содержащий список дат, когда студент присутствовал на паре.
AsyncAcademicPerformance – класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для получения списка заданий для студента. Сервер возвращает ответ, содержащий следующие поля: а) описание задания; б) тип задания (контрольная или лабораторная работа); в) комментарий преподавателя; г) статус (зачтено или не зачтено); д) дата проведения задания.
AsyncStatisticsStudent - класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для получения статистики посещений студента. Сервер возвращает ответ, содержащий следующие поля: а) общее количество пар; б) количество пар на которых присутствовал студент.
TaskbarForStudent – класс для представления одного задания студента. Данный класс содержит следующие поля: а) описание задания; б) тип задания (контрольная или лабораторная работа); в) комментарий преподавателя; г) статус (зачтено или не зачтено); д) дата проведения задания.
TaskbarAdapter - адаптер, унаследованный от BaseAdapter, для отображения списка статистики заданий студента по определенному предмету, которое содержит: а) тип задания (контрольная или лабораторная работа); в) комментарий преподавателя; г) статус (зачтено или не зачтено).
Взаимосвязь описанных выше классов отображена на рисунке 13. GetDateAllLessonsActivity - экран для отображения списка дат, когда
была проведена выбранная пара, доступный только преподавателю. Для получения данных выполняется запрос к веб – серверу (AsyncGetAllLessons).
Из данного класса можно перейти к экрану списка всех заданий по данному предмету для выбранной группы. Также здесь можно добавить новую пару (AsyncAddLesson), а при нажатии определенной даты открывается экран для отметки присутствующих студентов на этой паре.
AsyncGetAllLessons – класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для получения списка дат, когда была проведена выбранная пара. Сервер возвращает ответ в виде списка дат.
AsyncAddLesson - класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для добавления новой пары. Сервер возвращает ответ в виде: выполнен запрос или нет.
Взаимосвязь описанных выше классов отображена на рисунке 14.
Рисунок 13 – Взаимосвязь классов между собой (фрагмент для Activity InformationAboutSubject)
Рисунок 14 – Взаимосвязь классов (фрагмент для Activity
GetDateAllLessonsActivity)
ActivityTaskDiscipline - экран отображения списка заданий для группы по выбранной дисциплине, доступный только преподавателю. Для получения данных выполняется запрос к веб – серверу (AsyncGetTaskDiscipline). Данные отображаются с помощью адаптера (TaskDisciplineAdapter).Также на данном экране можно добавить новое задание для группы (ActivityAddTask).
TaskDisciplineAdapter – адаптер, унаследованный от BaseAdapter, для
отображения списка заданий группы по определенному предмету.
Task – класс для представления одного задания группы. Данный класс содержит следующие поля: а) id задания; б) тип задания (контрольная или лабораторная работа); в) описание задания; г) дата создания задания.
AsyncGetTaskDiscipline – класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для получения списка заданий выбранной группы по дисциплине, когда была проведена выбранная пара. Сервер возвращает ответ, содержащий следующие поля: а) id задания; б) тип задания (контрольная или лабораторная работа); в) описание задания; г) дата создания задания.
Взаимосвязь описанных выше классов отображена на рисунке 15.
Рисунок 15 – Взаимосвязь классов между собой (фрагмент для Activity
ActivityTaskDiscipline)
ActivityAddTask – экран добавления нового задания для группы по выбранной дисциплине. Данный экран доступен только преподавателю. Для добавления задания необходимо: а) выбрать тип задания (контрольная или лабораторная работа); б) ввести описание задания. При нажатии кнопки ―Сохранить‖ отправляется запрос (AsyncAddTask) на веб – сервер для добавления задания.
AsyncAddTask - класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для добавления задания по выбранной дисциплине для группы. Сервер возвращает ответ в виде: выполнен запрос или нет.
Взаимосвязь описанных выше классов отображена на рисунке 16.
+
ActivityAddTask
-
type : ArrayList
#
onCreate (saved :
Bundle)
+
install
()
+
b
ackToListDatePair ()
+
AsyncAddTask
-
server : String
-
answer : String
#
doInBackground(data : Map): Boolean
+
postRequest(body : String) : String
+
createBodyRequest(data: Map) : String
+
readAnswerServer(i:InputStream):String
+
ActivityTaskDiscipline
..
.
...
Web
Сервер
Рисунок 16 – Взаимосвязь классов между собой (фрагмент для Activity
ActivityAddTask)
ActivityNoteVisitStudents – экран для учета посещаемости группы на выбранной паре. Данный экран доступен только преподавателю. Для получения списка группы выполняется запрос (AsyncGetListGroup). Преподаватель отмечает присутствующих студентов с помощью checkbox.
Затем при нажатии кнопки ―Сохранить‖ отправляется запрос (AsyncNoteVisitStudent) на веб – сервер для сохранения присутствующих студентов на выбранной паре.
NoteVisitAdapter – адаптер, унаследованный от BaseAdapter, для отображения списка группы и чекбокса, чтобы отметить присутствующих студентов на паре.
AsyncNoteVisitStudent - класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для сохранения присутствующих студентов на выбранной паре. Сервер возвращает ответ в виде: выполнен запрос или нет.
Взаимосвязь описанных выше классов отображена на рисунке 17. ActivityChangeStatusTask - экран для изменения статуса сданных
заданий выбранного студента. Данный экран доступен только преподавателю. Для получения списка заданий выполняется запрос (AsyncGetTaskDiscipline). Преподаватель изменяет статус выбранного задания. Затем при нажатии кнопки ―Сохранить‖ отправляется запрос (AsyncChangeStatusTask) на веб – сервер для сохранения данных.
AsyncChangeStatusTask – класс, унаследованный от AsyncTask, который отправляет запрос к веб–серверу для изменения статуса сданных заданий выбранного студента. Сервер возвращает ответ в виду: выполнен запрос или нет.
Взаимосвязь описанных выше классов отображена на рисунке 18.
+
AsyncGetListGroup
-
server : String
-
answer : String
#
doInBackground(data : Map): Boolean
postRequest(body : String) : String
+
create
+
BodyRequest(data: Map) : String
readAnswerServer(i:InputStream):String
+
Web
Сервер
+
AsyncNoteVisitStudent
-
server : String
-
answer : String
#
doInBackground(data : Map): Boolean
postRequest(body : String) : String
+
+
createBodyRequest(data
:
Map) : String
+
readAnswerServer(i:InputStream):String
+
GetDateAllLessonsActivity
...
...
+
ActivityNoteVisitStudents
-
idStudents : ArrayList
#
onCreate (saved :
Bundle)
()
+
install
backToGetDateActivity()
+
()
+
getListGroup
:
parseAnswer (data
+
String) : ArrayList
+
NoteVisitAdapter
-
cnt : Context
-
result : ArrayList
-
students : ArrayList
-
inflater : LayoutInflater
+
NoteVisitAdapter(Context
cnt, students:ArrayList)
+
getCount() : Integer
+
getItem(pos : Integer) : Subject
+
getItemId(pos : Intege
r) : long
+
getView(pos:Integer, view:View,
parent:ViewGroup) : View
+
getStudent(pos : Integer) : String
+
getResultSelected() : ArrayList
+
BaseAdapter
...
...
Рисунок 17 – Взаимосвязь классов между собой (фрагмент для Activity
ActivityNoteVisitStudents)
+
ActivityChangeStatusTask
-
idStudent : String
-
idSubject : String
-
num_lessons : String
-
tasks : ArrayList
+
onCreate (saved : Bundle)
+
loadData()
+
install()
+
getTasks()
InformationAboutSubject
+
...
...
+
AsyncChangeStatusTask
-
server : String
-
answer : String
#
doInBackground(data : Map): Boolean
postRequest(body : String) : String
+
createBodyRequest(data: Map) : String
+
+
parseAnswer(answer : String)
readAnswerServer(i:InputStream):String
+
Web
Сервер
+
AsyncCha
ngeStatusTask
-
server : String
-
answer : String
#
doInBackground(data : Map): Boolean
+
postRequest(body : String) : String
+
createBodyRequest(data: Map) : String
parseAnswer(answer : String)
+
+
readAnswerServer(i:InputStream):String
Рисунок 18 – Взаимосвязь классов между собой (фрагмент для Activity ActivityChangeStatusTask)
Приведенные диаграммы классов отображают архитектуру разработанного приложения.