532
РАЗРАБОТКА РАСПРЕДЕЛЕННОЙ СИСТЕМЫ ИСПОЛЬЗОВАНИЯ УДАЛЕННЫХ ВЫЧИСЛИТЕЛЬНЫХ РЕСУРСОВ
2 Разработка распределенной вычислительной системы . 
2.4 Реализация . 
2.4.3 Состав разработанной программы 
----------
Система CRDS, разработанная на языке Java с применением технологии RMI в соответствии с описанными моделями связи и взаимодействия, включает в себя следующие классы и интерфейсы: а) Пакет client.
1)  Client.java – интерфейс RMI, используемый для связи с клиентом системы CRDS.
2)  ClientImpl.java – реализация интерфейса Client, также является реализацией компонента клиента системы CRDS. Экземпляр является объектом RMI.
3)  ClientThread.java – класс, унаследованный от класса Thread, создёт, регистрирует, а затем запускает объект класса ClientImpl.
Объект класса ClientImpl запускается системой CRDS, как поток.
4)  ConnectThread.java – класс, унаследованный от класса Thread, представляет собой поток, обслуживающий запросы пользователей, т.е. выполняет поиск и соединение с ServerManager. Запускается в нескольких экземплярах, как поток в ClientImpl. б) Пакет compute_engine.
1)  ComputeEngine.java – класс реализующий управляющую компоненту системы CRDS, объект которого позволяет пользователю передать задачу на выполнение удаленной машине и получить результат. Открыт для пользователя.
2)  ClientConnectorThread.java – класс, унаследованный от класса Thread, обращается к клиенту за получением ссылки на сервер, устанавливает связь с сервером и передаёт задачу. Запускается как поток в классе ComputeEngine. в) Пакет connector.
1)  Connector.java – интерфейс, который содержит функции получения ссылки на менеджера серверов его регистрации и удаления в глобальной и локальной сети.
2)  LocalConnector.java – класс реализующий интерфейс Connector для работы с локальной сетью.
3)  LocalRecieverThread.java – класс, унаследованный от Thread, выполняет прием запросов и отправку ответов класса LocalConnector другого устройства.
4)  WebConnector.java – класс реализующий интерфейс Connector для работы с глобальной сетью и веб сервером.
5)  WebRequest.java – класс для формирования запросов веб серверу.
г) Пакет crds.
1)  CRDS.java – класс реализации основного компонента системы CRDS, отвечающего за работу остальных компонентов. Хранит данные о настройке системы и осуществляет изменение параметров других компонентов. Экземпляр является объектом RMI. Реализует интерфейс PublicCRDS.
2)  PublicCRDS.java – интерфейс RMI, описывающий методы контроля и управления объекта класса CRDS.
3)  CRDSController.java – класс, позволяющий управлять и контролировать систему CRDS. Доступен для пользователя.
4)  ScheduledTask.java – класс, являющийся задачей для класса java.util.Timer, осуществляет проверку состояний запущенных серверов и при необходимости инициирует запрос менеджеру серверов на закрытие сервера. Запускается в CRDS.java. д) Пакет server.
1)  IServer.java – интерфейс RMI описывающий методы сервера.
2)  IServerManager.java – интерфейс RMI описывающий методы менеджера серверов.
3)  ProcessController.java – класс предоставляющий возможность запуска сервера по заданным параметрам как отдельного процесса, а также осуществляет перехват потоков ошибок и выходных данных сервера.
4)  ServerImpl.java – класс реализации сервера, является объектом RMI и обеспечивает выполнение поставленной удаленной машиной задачи, а также возвращает результат вычислений.
5)  ServerInfo.java – класс, описывающий параметры сервера.
6)  ServerManagerImpl.java – класс реализации менеджера серверов, осуществляет контроль серверов и получение запросов от клиента. Экземпляр является объектом RMI.
7)  ServerManagerThread.java – класс, унаследованный от класса Thread, реализует создание объекта ServerManagerImpl и выполняет регистрацию объекта в локальной и глобальной сети.
8)  ServerStatus.java – класс перечислений, содержит возможные статусы сервера.
9)  ServerThread.java – класс, унаследованный от класса Thread, выполняет задачу, установленную удаленным пользователем.
Вызывается как поток в класск ServerImpl. е) Пакет task.
1)  Task.java – интерфейс задачи, описывающий один метод execute(), который реализуется пользователем.
2)  TaskStatus.java – класс перечислений, содержит возможные статусы задачи до её передачи серверу.
ж) Пакет zip.
1) ZipArchivator.java – класс, реализующий методы упаковки и распаковки данных архивом Zip.
Структура выше описанных классов и интерфейсов описана в виде
UML диаграмм классов, которые представлены в ПРИЛОЖЕНИЕ A.