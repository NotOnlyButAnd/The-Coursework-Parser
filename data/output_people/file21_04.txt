784
НА ТЕМУ «АРХИТЕКТУРА И МЕТОДЫ РАЗРАБОТКИ WEB-СЕРВИСОВ»
1 ТЕХНОЛОГИЯ WEB-СЕРВИСОВ 
1.3 Архитектура SOAP Web-сервисов 
----------
SOAP Web-сервисы основываются на четырех технологиях: XML, SOAP, WSDL и UDDI. Эти технологии обеспечивают работоспособность сервисов, и связаны между собой так, как показано на рисунке 1:
Рисунок 1 – Структура SOAP Web-сервисов
В нижней части рисунка 1 указан так называемый протокольный уровень, который содержит стандартные протоколы вызова Web-сервисов по сети. Изначально в нем используется HTTP/1.1 – текстовый протокол вида «запрос-ответ», который подразумевает следующую последовательность действий: клиент устанавливает соединение с сервером и отсылает запрос в специальном для протокола формате, затем сервер принимает и обрабатывает данный запрос, после чего отвечает на него. Однако также можно использовать SMTP и FTP.
XML выполняет важнейшую роль в Web-службах. Помимо того, что он является основополагающей SOAP и WSDL, XML задает кроссплатформенный и модифицируемый формат данных для обмена информацией между клиентом и сервисом. В отличие от HTML, XML дает возможность отображать один и тот же информационный документ различными способами. В общем смысле, XML – язык разметки документов, обеспечивающий текстовый формат хранения данных.
Протокол сервис-ориентированной архитектуры, основанный на XML, предназначен для взаимодействия клиентов с сервисами посредством обмена XML-сообщениями. Чаще всего SOAP используется поверх HTTP, однако протоколы FTP, SMTP и другие также могут его использовать.
Гибкость структуры SOAP предоставляет возможность адаптировать SOAP-сообщения разнообразным требованиям распределенной среды (например: безопасность, надежность), что делает SOAP независящим от платформы протоколом.
Рисунок 2 – «Структура SOAP-сообщения»
Структура сообщения SOAP (см. рисунок 2) состоит из четырех элементов <Envelope> (конверт), <Header> (заголовок), <Body> (тело) и <Fault> (неисправность).
1)	Корневой элемент, играющий роль идентификатора SOAP-сообщения, указывается с использованием префикса пространства имен ENV и элемента Envelope. В общем можно сказать, что конверт SOAP решает проблему, когда мы знаем, когда именно мы получили сообщение и готовы его обработать. То есть конверт SOAP  - это в основном механизм упаковки сообщения. Конверт является обязательной частью сообщения SOAP и каждый такой конверт должен содержать ровно один элемент Body.
2)	Необязательный элемент, содержащий информацию, которая влияет на обработку сообщения после получения приложением SOAP-сообщения. Элементы заголовка могут встречаться в сообщении несколько раз <Header> предназначены для указания дополнительных функций и возможностей приложения, например, он может использоваться для указания цифровой подписи служб, защищенных паролем. Заголовок также может содержать элементы, несущие данные о безопасности, маршрутизации и др., называемые блоками заголовка.
Блоки заголовка в свою очередь могут иметь такие атрибуты, как:
- encodingStyle – хранит в себе информацию о способе преобразования данных в формат SOAP-сообщения;
- role – задает SOAP-роли для SOAP-обработчика;
- mustUnderstand – в зависимости от значения true или false устанавливается обязанность проверки данного блока заголовка обработчиком;
- relay – при значении true указывает, что данный блок заголовка остается в SOAP-сообщении, если он не был до этого обработан промежуточным SOAP-обработчиком.
3)	Обязательный элемент, который транспортирует основные данные конечному SOAP-получателю. Тело SOAP должно содержаться в конверте и должно следовать всем заголовкам, которые могут быть определены для сообщения.
4)	Если во время обработки возникает ошибка, то ответом на SOAP-запрос является элемент ошибки в теле сообщения. Отказ возвращает конкретную информацию об ошибке, включая предопределенный код, описание и адрес процессора SOAP, который сгенерировал ошибку. Сообщение может содержать только один блок отказа. Ошибка SOAP является необязательной частью сообщения и связана с диапазоном кодов состояния от 500 до 599. Ошибка SOAP имеет следующие элементы:
- <faultCode>: В данном элементе выводится класс ошибки: SOAP-ENV: VersionMismatch, SOAP-ENV: MustUnderstand, SOAP-ENV: Client, SOAP-ENV: Server.
- <faultString>: Сообщение, объясняющее ошибку.
- <faultActor>: Текстовая строка, указывающая на то, кто вызвал ошибку.
Пригодится в случае, когда SOAP-сообщение проходит через несколько узлов. Все промежуточные узлы также должны содержать в себе этот элемент.
- <detail>: Элемент, используемый для передачи сообщений об ошибках приложения.
Из структуры SOAP-сообщения можно сделать вывод, что оболочка сообщения независима относительно протокола, по которому передаются сообщения.
WSDL обеспечивает доступ к Web-сервису и хранит в себе полную информацию, необходимую для допуска к данному сервису. Видит Web-сервис как список портов, которые являются набором абстрактных операций и сообщений. Такие операции дают возможность использовать их с SOAP, HTTP, MIME или GET/POST.
WSDL описывает среду как конечный набор точек, обменивающихся сообщениями друг с другом, и также не зависит от платформы и может применяться в Web-сервисах различной структуры.
WSDL описывает сервис двумя уровнями:
a)  абстрактный – описание в терминах получаемых и отсылаемых сообщений;
b)  детальный – уточняются детали транспортного протокола, формата сообщений, функциональность и адрес сервиса.
Подробнее WSDL рассмотрим в практической части.
UDDI – это реестр на основе XML, позволяющий находить Web-сервисы по WSDL-описанию и не зависящий от платформы. Его цель – упростить онлайн-транзакции, позволяя компаниям (и не только) находить друг друга в Интернете и обеспечивать совместимости своих систем для электронной коммерции.
По сути, UDDI предоставляет пользователям детальную информацию о деталях реализации Web-сервисов, а также их функциональным возможностям. Для управления такими реестрами создается определенный сервер, предоставляющий специальное приложение, позволяющее управлять информацией и сервисах в различного рода базах данных.
Такой реестр можно логически разделить на три категории:
- информация о поставщике Web-сервиса;
- классификация Web-сервиса;
- детали реализации Web-сервиса.