356
ТЕХНОЛОГИЯ АНАЛИЗА ДАННЫХ СОЦИАЛЬНОЙ СЕТИ В ЭКОСИСТЕМЕ PYTHON
4. Исследование данных – сущность и временные ряды 
4.1 Извлечения хештегов из ленты . 
----------
Проведем частотный анализ на основе данных, собранных ранее. Данный анализ позволит получить ряд статистик. Исследование и анализ сущности хештег, интересен прежде всего тем какими темами автор определяет твит.
Проведем анализ твитов  https://twitter.com/habr_com - портал посвященный программному обеспечению. Узнаем какие технологии упоминаются на портале наиболее часто. Для этого воспользуемся сценарием Приложение 3 для извлечения хештегов из ленты https://twitter.com/habr_com и вывода наиболее распространённых тегов.
Запускается этот сценарий следующей командой:
$ python twitter_hashtag_frequency.py user_timeline_Habr_com. jsonl
Здесь user_timeline_Habr_com — это файл JSON Lines, созданный ранее.
Данный сценарий принимает аргумент командной строки с именем файла
. jsonl и построчно читает его содержимое. Поскольку каждая строка содержит документ JSONL, сценарий загружает строку в переменную tweet и вызывает вспомогательную функцию get_hashtags (), чтобы извлечь список хештегов. Этот тип сущностей сохраняется в переменной hashtags, которая объявляется как collections.
Counter – специальный тип словаря, который используется для подсчета хешируемых объектов - в нашем случае строк. Словарь hashtags хранит строковые ключи и соответствующие им частоты - в качестве значений.
Будучи подклассом типа dict, объект Counter является неупорядоченной коллекцией. Его метод most_common () отвечает за упорядочение ключей в зависимости от их значений (в порядке убывания частоты) и возвращает список кортежей (ключ, значение).
Вспомогательная функция get_hashtags () извлекает список хештегов из твита. В качестве аргумента ей передается весь твит, загруженный
в словарь. Если сущности в твите присутствуют, словарь будет иметь ключ entities. Но, так как он может отсутствовать, нельзя напрямую обратиться к твиту, как tweet [‘entities’], потому что эта инструкция возбудит исключение KeyError в отсутствие данного ключа, поэтому воспользуемся функцией get (), передав ей пустой словарь как значение по умолчанию, возвращаемое в отсутствие сущностей. Второй шаг- извлечение хештегов из сущностей. Поскольку entities — это тоже словарь, а ключ hashtags тоже может отсутствовать, снова воспользуемся функцией get (), но на этот раз в качестве значения по умолчанию укажем пустой список. И, наконец, воспользуемся генератором списков, чтобы выполнить обход хештегов и извлечь из них текст. Хештеги нормализуются функцией lower (), которая переводит текст в нижний регистр, поэтому такие упоминания, как #Java или #JAVA, все будут сгруппированы в #java.
Анализ твитов портала https://twitter.com/habr_com с помощью разработанного сценария дал следующий результат:
Из анализа сущностей автора видны наиболее часто используемые конкретные технологии в области IT технологий.