1029
РАЗРАБОТКА ВЫСОКОНАГРУЖЕННОГО РАСПРЕДЕЛЕННОГО ПРИЛОЖЕНИЯ 
1 Свойства и подходы при разработке высоконагруженных распределѐнных систем 
1.2 Балансировка нагрузки 
----------
К приложениям, требующим балансировки, как правило относят наиболее типовые Web—серверы, серверы электронной почты и DNS—серверы, которые обслуживают сеть Интернет и корпоративные сети организаций. Помимо этого многие прикладные программы и инфраструктурные сервисы также могут поддерживать возможность балансировки, для чего они должны удовлетворять следующим требованиям:
* согласованность данных на всех параллельно—доступных серверах;
* целостность асинхронных и длительных по времени транзакций;
* поддержка приложением системной инфраструктуры балансировки нагрузки;
Согласованность данных — основная проблема, так как все серверы должны выдавать одинаковые ответы пользователям на один и тот же запрос. При этом, если данные изменились на одном сервере, то они должны быть реплицированы на остальные сервера. А в зависимости от требований к времени обновления реплик на серверах технологии реализации согласования данных могут сильно отличаться: от переноса данных оператором системы на диске до организации масштабной системы онлайн—кластеризации и репликации данных (как в поисковых Web—площадках). Фактически, данную задачу должно решать прикладное программное обеспечение, но ни в коем случае не «железо» (зачастую при закупке оборудования предприятием допускается такая ошибка).
Целостность транзакций — одна из наиболее сложных проблем при организации NLB—кластера. В NLB—кластерах возможны ситуации, в которых приложение, начиная работу с одним сервером кластера, завершает еѐ на другом сервере. Очевидно, что необходимо обеспечить целостность данных и корректность завершения транзакции.
Особое значение эта проблема имеет при организации сетей с балансировкой нагрузки и отказоустойчивостью маршрутизаторов и брандмауэров.
Инфраструктура балансировки сетевой нагрузки обеспечивает равномерное распределение заявок пользователей между серверами системы  балансировки.
Различают следующие уровни реализации NLB—системы:
а) cетевой уровень. Поддерживается на уровне операционной системы и реализован в Windows Server Network Load Balancing. Суть подхода заключается в логическом объединении всех интерфейсов серверов под один IP—адрес в сети, при котором серверы договариваются между собой о порядке обслуживания запросов. Существует два способа реализации этого подхода:
* unicast mode. В случае unicast mode на всех серверах NLB—кластера
настраивается один виртуальный MAC—адрес, что позволяет организовать прием пакетов на все интерфейсы кластера. В этом случае узлы кластера не могут обмениваться информацией между собой с использованием таких интерфейсов. Для этого обычно организуется дополнительная административная сеть или сеть доступа к данным, в которую узлы подключаются дополнительными интерфейсами;
* multicast mode. В этом случае передача пакетов на узлы кластера
организуется посредством коммутатора, который должен поддерживать multicast mode. В этом случае на интерфейсах кластера задействуются штатные MAC—адреса и поэтому серверы могут взаимодействовать друг с другом, используя эти же интерфейсы;
б) уровень службы имен интернета DNS. Данная служба позволяет преобразовывать имена компьютеров вида "comp2.domain.net" в IP—адреса вида "192.168.200.201" и наоборот для коммуникаций по протоколу IP. Для балансировки нагрузки в службе DNS для одного имени типа
"comp2.domain.net" настраивается несколько IP—адресов, а также опция "round robin", которая устанавливает порядок выдачи адресов для DNS—запросов по кругу. В результате, каждый клиент, по мере выдачи запросов на одно имя на DNS—сервер, будет получать разные IP—адреса, а значит, подключаться к разным серверам;
в) уровень приложения. Данный подход реализуется в прикладном программном обеспечении и может не зависеть от инфраструктуры (уровней 1 и 2). Примерами таких приложений являются Active Directory, Microsoft
Exchange Server, WINS, Kaspersky Administration Kit, корпоративные распределенные системы учета и т.п., в которых реализация носит индивидуальный характер;
Вычислительные кластеры используются в частности в научных исследованиях. Для таких кластеров существенным показателем является высокая производительность процессора в операциях над числами с плавающей точкой и низкая латентность объединяющей сети, менее же существенна скорость  операций ввода—вывода, которая в большей степени важна для баз данных и web—серверов. Данный вид кластеров позволяет уменьшать время расчѐтов в сравнении с одиночным компьютером, распределяя задания на параллельно выполняющиеся ветки, которые производят обмен данными по связывающей их сети.
Системы распределенных вычислений не принято считать кластерами, но их принципы в значительной степени с кластерной технологией. Главное отличие — низкая доступность каждого узла, то есть невозможность гарантировать его работу в заданный момент времени (узлы подключаются и отключаются в процессе работы), поэтому задача должна быть разбита на ряд независимых друг от друга процессов. Такая система, в отличие от кластеров, не похожа на единый компьютер, а служит упрощѐнным средством распределения вычислений. Нестабильность конфигурации, в таком случае, компенсируется большим числом узлов.
Устойчивая ассоциация высоконагруженных систем с большим количеством пользователей в индустрии информационных технологий появилась довольно  давно. Ничего принципиально неверного в такой связи нет. Но если высокая нагрузка подразумевает большое количество пользователей, то большое количество пользователей совсем не обязательно подразумевает высоконагруженную систему.
Высоконагруженные системы являются системами распределенными, то есть работают более чем на одном сервере. Зачастую это десятки и сотни серверов. Требование распределенности вытекает из следующих причин:
* необходимости обрабатывать возрастающие объемы данных;
* необходимости ―живучести‖ системы в случаях отказа части серверов;
Сложно, скорее всего, сделать ошибку, если сказать что большинство высоконагруженных приложений являются Интернет—приложениями. А отличительной особенностью современного Интернета основанного на концепции Web 2.0 является тот факт, что сами пользователи генерируют данные, которые они сами же в итоге и потребляют. Это приводит к тому, что чем больше пользователей, тем больше потенциальный объем хранимых данных.
Требование обработки больших объемов данных может существенно осложнить жизнь. Под ―большим объемом‖ подразумевается такой объем информации, который не может эффективно обработать один компьютер. В большинстве случаев, это объем превышающий объем доступной на сервере оперативной памяти. То есть приходится тем или иным образом распределять данные между несколькими серверами, каждая из которых обрабатывает свой небольшой кусочек данных, но делает это эффективно, без page fault‘ов (не используя swap) и прочих неприятностей. Необходимость эффективной обработки данных диктуется другим очень важным качеством высоконагруженных систем, – интерактивностью, о котором будет сказано ниже.
Но большие объемы данных – это не все. Ко всему к этому хочется, чтобы система работала без остановок и перерывов. Но бывают такие моменты, что любое даже самое надежное оборудование иногда выходит из строя. Встает естественная задача обеспечения доступности системы в случаях отказа оборудования.
Тут и возникает потребность в области знания распределенных систем, эксплуатация которых редко бывает безоблачной, даже когда используются готовые решения. Тем не менее, распределенные системы, не смотря на сложность их разработки и поддержки, пожалуй, единственный подход позволяющий обеспечить вышеизложенные требования в полной мере.
Если приложение представляет хоть какой—то интерес, то даже если ничего не делать, аудитория пользователей будет расти просто с ростом аудитории интернета. Поэтому характерной чертой высоконагруженных систем является не просто большое количество пользователей, но и позитивная динамика количества пользователей.
В контексте реалий Web 2.0 растущее количество пользователей может привести к тому, что такую же позитивную динамику возможно иметь и по данным. Поэтому в контексте высоконагруженных систем корректней говорить не о большом, а о растущем  количестве пользователей и данных.