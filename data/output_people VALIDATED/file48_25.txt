402
РАСПРЕДЕЛЕННАЯ ANDROID-СИСТЕМА «АССИСТЕНТ ПРЕПОДАВАТЕЛЯ» 
3 Программная реализация приложения КубГУ Assistent 
3.6 Безопасность передачи данных . 
----------
При разработке серверной части большое внимание было уделено безопасности. Данный пункт заслуживает большого внимания так, как различные пользователи приложения имеют различные права доступа и если не производить проверку на то, какой пользователь делает тот или иной запрос, то данные в базе данных могут быть изменены или вовсе удалены.
Для решения данной проблемы можно использовать два подхода:  - передача логина и пароля при каждом запросе к базе данных; - использование специальных протоколов.
Способ передачи логина и пароля является не самым лучшим, так как имеет ряд недостатков, один из которых – авторизация при каждом обращении к базе данных, а таких обращений в одном запросе от одного пользователя может быть достаточно много. Таким образом, данный способ будет сильно загружать сервер, базу данных и увеличит время выполнения запроса, а также увеличит вероятность того, что запрос не сможет быть выполнен.
Таким образом, для того чтобы обеспечить безопасность в разрабатываемом приложении и защитить данные от несанкционированного изменения, был выбран способ использования специальных протоколов, а именно протокола OAuth 2.0.
OAuth 2.0 – протокол авторизации, позволяющий выдать одному приложению права на доступ к ресурсам пользователя на другом сервисе. Протокол избавляет от необходимости доверять приложению логин или пароль, а также позволяет выдавать ограниченный набор прав, а не все сразу.
Общая схема работы приложения, использующего OAuth следующая:
* получение авторизации;
* обращение к защищенным ресурсам.
Результат авторизации – access token, некий ключ, который представляет из себя набор символов, предъявление которого является пропуском к защищенным ресурсам. Обращение к этим самым ресурсам происходит по HTTP с указанием в заголовках или в качестве одного из параметров полученного access token’а.
Данный стандарт авторизации основан на базовых принципах интернета, что делает возможным применение авторизации практически на любой платформе. Стандарт имеет поддержку крупнейших площадок и его популярность только растет. В OAuth описано сразу несколько вариантов авторизации, подходящих для различных ситуаций:
* авторизация для приложений, имеющих серверную часть (сайты или веб-приложения);
* авторизация клиентских приложений (мобильные и desktopприложения);
* авторизация по логину и паролю;
* восстановление предыдущей авторизации.
Для разрабатываемого приложения подходит ситуация авторизации по логину и паролю, так как данная информация будет иметься у каждого пользователя разрабатываемой распределенной системы.
Выбранный способ представляет собой простой POST-запрос, в
котором передается введенный пользователем логин и пароль, а результатом которого является отправленный сервером access token.
Пример авторизации с использованием тестовых данных:
Запрос, отправляемый клиентом с Android-приложений:
POST /oauth/token HTTP/1.1
Host: example.com
Content-Type: application/x-www-form-urlencoded
{"type":"student", "login":"test", "password":"098f6bcd4621d373cade4e832627b4f6"}
Ответ, отправляемый сервером клиенту в случае успешной авторизации:
HTTP/1.1 200 OK
Content-Type: application/json
{
"access_token":"9530592e58fa349484d388ae50486406"
}