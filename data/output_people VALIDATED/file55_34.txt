995
ИССЛЕДОВАНИЕ СЛУЧАЙНЫХ ОРГРАФОВ СТАТИЧЕСКИХ КОМПЬЮТЕРНЫХ AD HOC СЕТЕЙ 
4 Практическая реализация . . 
4.5 Структура программы 
4.5.2. Описание работы программы . 
----------
Была реализована программная имитация ad hoc сети с заданными согласно заданию параметрами. В начале работы программа устанавливает такие параметры, как размер сети, количество генерируемых ориентированных графов для каждой конфигурации сети. Для каждого значения 2  n  10 количества узлов в сети выполнение последующего алгоритма разбивается на две части. Первая часть выполняется для случайного, взаимно независимого, равномерно распределенного на [1 – c, 1 + c] значения радиусов узлов со средним значением 1,0. Анализ проводится для различных значений 0,2  c  0,8 с шагом 0,1. Вторая часть выполняется для радиуса R = 1 и необходима для сравнительных оценок.
Для каждого значения радиуса происходит генерация 105 узлов сети с переменными параметрами. Для этого создается пустой список узлов и в соответствии с размером сети создаются и затем добавляются в список узлы со случайными координатами и, в зависимости от шага, либо случайным радиусом от [1 – c, 1 + c], либо константным, равным 1. Генерация случайных координат учитывает проверку нахождения в пределах обозначенной заданием окружности. Проверка заключается в сравнении суммы квадратов разниц координат по оси X и разниц координат по оси Y. Если эта сумма меньше квадрата радиуса окружности, то координаты находятся внутри этой окружности.
В дальнейшем из узлов сети строятся графы достижимости, после чего инкрементируется счетчик разновидностей графов, необходимый в дальнейшем для составления таблицы вероятностей появления орграфов, которая соответствует таблице диаграмм орграфов, приведенной в книге Ф.Харари «Теория графов», а также перечня наиболее и наименее вероятных орграфов. Граф строится путем прохода по списку узлов и поиска других узлов, которые находятся в области покрытия узла. Полученную матрицу смежности мы можем использовать для дальнейших расчетов.
На следующем шаге выполняется проверка каждого графа на сильную связность, слабую связность, одностороннюю связность, несвязность и увеличиваются соответствующие счетчики в случае положительного результата.
Для проверки графа на сильную связность в программе используется алгоритм Косарайю, который по данному ориентированному графу, определяет, сильно ли он связан или нет. Ориентированный граф сильно связан, если существует путь между любыми двумя парами вершин.
Например, граф на рисунке является сильно связным.
Рисунок 15 — Сильно связный граф
Алгоритм прост для неориентированного графа, можно просто сделать поиск в глубину (DFS) или в ширину (BFS), начиная с любой вершины. Если BFS или DFS посетили все вершины, то неориентированный граф связан. Этот подход не будет работать для ориентированного графа. Например, рассмотрим граф на рисунке 16, который не сильно связан. Если мы начинаем DFS (или BFS) с вершины 0, мы можем достичь всех вершин, но если мы начнем с любой другой вершины, мы не сможем достичь всех вершин.
Рисунок 16 — Граф, не являющийся сильно связным
Для ориентированного графа можно использовать алгоритм поиска сильных компонент. Мы можем найти все сильные компоненты за O(V+E) времени, где V — количество вершин, а E — количество ребер. Если число сильных компонент равно единице, то граф сильно связан. Алгоритм для поиска сильных компонент делает дополнительную работу, поскольку находит все сильные компоненты.
Следующий алгоритм, основанный на DFS на основе Косарайю, выполняет два обхода графика DFS:
а) 	инициализировать все вершины как не посещенные;
б) провести обход в глубину графа, начиная с любой произвольной вершины v, если обход в глубину не посещает все вершины, тогда завершить алгоритм и вернуть ложь;
в) 	обратить все дуги (или найти обратный граф);
г) 	отметить все вершины в обратном графе как не посещенные;
д) провести обход в глубину в обратном графе, начиная с той же вершины v, что и на шаге б); если обход DFS не посещает все вершины, то вернуть ложь, в противном случае — истину.
Идея состоит в том, что если каждый узел может быть достигнут из вершины v, и каждый узел может достигнуть v, то граф сильно связан. На шаге б) мы проверяем, достижимы ли все вершины из v. На шаге г) мы проверяем, могут ли все вершины достигать v в обратном графе, если все вершины достижимы из v, то все вершины могут достигать v в исходном графе.
Для проверки, является ли граф слабо связным, в программе учитывается тот факт, что если построенный из ориентированного графа неориентированный граф является связным, то исходный ориентированный граф является слабо связным.
Для того, чтобы узнать, является ли граф односторонне связным, в программе используется модифицированный поиск в глубину. Мы можем начать поиск из любой вершины. Необходимо отметить все вершины, достижимые из первой вершины, по мере посещения. Затем мы проходим через все вершины. Для каждой непосещенной вершины мы проводим поиск в глубину, ведя список, содержащий все непосещенные вершины, которые мы прошли. Если во время поиска в глубину мы не посещаем ни одной посещенной во время предыдущего поиска в глубину вершины, то мы можем сразу сделать вывод, что ориентированный граф имеет несколько связных компонент и не является односторонним. В противном случае мы помечаем все вершины в списке, полученном во время поиска, как посещенные и продолжаем. Как только мы пройдем через все вершины графа, и все поиски в глубину пройдут некоторые посещенные вершины, мы можем заключить, что граф является односторонне связанным.
Для проверки графа на связность мы можем использовать поиск в глубину. Мы можем выбрать одну из вершин и пометить ее. Затем пометить все вершины, смежные с ней. На следующем шаге помечаем все вершины, смежные с этими вершинами, кроме уже помеченных. И так далее до тех пор, пока на очередном шаге мы не сможем поставить ни одну новую метку. Если помечены все вершины графа, то граф связный. В противном случае граф несвязный, и мы только что пометили один из компонентов связности.
После генерации необходимого количества графов и их проверки мы можем посчитать, сколько процентов составляет доля каждого типа графа, и добавить эти значения в список для дальнейшей обработки и вывода в виде графика.
Мы формируем список для каждого типа графов для каждого размера сети n, а затем списки этих списков для каждого типа графов. В итоге результирующие списки хранят списки для каждого размера сети n.
Для удобного отображения на графиках списки списков необходимо представить в виде двумерного массива и транспонировать.
Затем мы строим список вероятностей появления ориентированных графов, список наиболее вероятных орграфов и список наименее вероятных ориентированных графов.
После этого нам осталось вывести графики полученных результатов:
вероятность появления сильно связного, слабо связного, односторонне связного и несвязного ориентированных графов.
Полный исходный текст программы находится в приложении А.