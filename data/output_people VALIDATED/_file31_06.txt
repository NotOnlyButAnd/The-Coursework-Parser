343
Моделирование трехмерных сцен на основе оптимизированных октодеревьев
2 Методы оптимизации алгоритмов на октодеревьях 
2.1 Общая оптимизация октодерева 
----------
Одним из путей оптимизации дерева является добавление информации об нижестоящих листовых узлах во внутренние узлы дерева. Таким образом, ценой увеличения количества потребляемой памяти, появляется возможность быстро анализировать нижестоящие узлы. В операции FIND(K) появляется возможность преждевременно прервать поиск элемента в случае, если искомый узел исчез из списка нижестоящих узлов. Во время итерации по узлам дерева появляется возможность прекратить итерацию вглубь поддерева в случае, если там присутствуют или отсутствуют какие-либо данные.
Однако, вышеописанная оптимизация значительно увеличивает количество потребляемой памяти. Имеет смысл объединять несколько одиночных соседних узлов, образующих собой куб со стороной  в один большой узел – таким образом значительно экономится память на удалении внутренних и внешних узлов при большом количестве однотипных данных.
Комбинируя вышеописанные оптимизации можно достичь значительного ускорения обработки и экономии памяти при сохранении информации об трехмерном пространстве в октодерево.
Во время сохранения или передачи графа добавленные избыточные данные можно убрать и добавлять автоматически во время приема данных, если в этом будет необходимость. В некоторых случаях имеет смысл передавать не все узлы октодерева, а только те, которые будут необходимы. Например, в воксельной графике не имеет смысла передавать невидимые воксели в графический процессор, так как они не влияют на вычисления сцены.
В результате вышеописанных оптимизаций несколько усложняется процесс построения графа.
Рассмотрим следующий пример графа G. Пустые листовые узлы помечены буквой «Е», узлы с данными – некоторой цифрой. Красными и зелеными узлы с данными, причем в красных и зеленых узлах находятся разные данные. На рисунке 4 граф уже имеет 14 заполненных листовых элементов.
Рисунок 4 – граф G.
В октодерево вставляют новый элемент на место зеленого в левом узле. После этого все дочерние узлы левой вершины станут красными. В этом случае они будут объединены в один большой узел. На рисунке 5, в результате данных преобразований, узел второго уровня обозначается как узел, имеющий в дочерних только красные вершины. Теперь он хранит в себе лишь информацию о себе самом, а информация об дочерних вершинах не хранится. Таким образом выходит значительная экономия памяти в данном узле.
В реальных условиях похожие данные, зачастую, находятся в одном месте и объединяются с высокой вероятностью.
Рисунок 5 – граф G после добавления узла