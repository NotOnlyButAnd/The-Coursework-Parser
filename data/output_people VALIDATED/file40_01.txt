518
СРАВНИТЕЛЬНЫЙ АНАЛИЗ СЛОЖНОСТИ ГЕНЕТИЧЕСКИХ АЛГОРИТМОВ НА ПРИМЕРЕ ЗАДАЧИ КОММИВОЯЖЕРА 
1 Постановка задачи 
----------
Задача коммивояжёра — важная задача транспортной логистики, отрасли, занимающейся планированием транспортных перевозок. Коммивояжёру, чтобы распродать нужные и не очень нужные в хозяйстве товары, следует объехать n пунктов и в конце концов вернуться в исходный пункт. Требуется определить наиболее выгодный маршрут объезда. В качестве меры выгодности маршрута (точнее говоря, невыгодности) может служить суммарное время в пути, суммарная стоимость дороги, или, в простейшем случае, длина маршрута. Пример решения задачи коммивояжера изображен на рисунке 1.
Рисунок 1 – Пример решения задачи коммивояжера
Совершенно очевидно, что задача может быть решена перебором всех вариантов объезда и выбором оптимального. Проблема в том, что количество возможных маршрутов очень быстро возрастает с ростом n (оно равно  — количеству способов упорядочения пунктов). К примеру, для 100 пунктов количество вариантов будет представляться 158-значным числом — не выдержит ни один калькулятор. Мощная ЭВМ, способная перебирать миллион вариантов в секунду, будет биться с задачей на протяжении примерно 3*10144 с. Увеличение производительности ЭВМ в 1000 раз даст хоть и меньшее в 1000 раз, но по-прежнему чудовищное время перебора вариантов. Не спасает ситуацию даже то, что для каждого варианта маршрута имеется 2n равноценных, отличающихся выбором начального пункта (n вариантов) и направлением обхода (2 варианта). Перебор с учётом этого наблюдения сокращается незначительно — до  вариантов.
Алгоритм, основанный на полном переборе вариантов, не является самым эффективным (в смысле быстродействия) для решения задачи коммивояжёра. Однако не существует алгоритма решения, имеющего степенную сложность (то есть требующего порядка  операций для некоторого a) — любой алгоритм будет хуже. Всё это делает задачу коммивояжёра безнадёжной для ЭВМ с последовательным выполнением операций, если n хоть сколько-нибудь велико.
В таком случае следует отказаться от попыток отыскать точное решение задачи коммивояжёра и сосредоточиться на поиске приближённого — пускай не оптимального, но хотя бы близкого к нему. В виду большой практической важности задачи полезными будут и приближённые решения.
Заметим, что интеллект человека, не вооружённый вычислительной техникой, способен отыскивать такие приближённые решения задач, требующих огромного перебора вариантов в поисках оптимального. Например, шахматы. Человек может весьма успешно соперничать в этой игре с вычислительной машиной, либо вовсе не прибегая к перебору, либо сводя его к минимуму. Человек руководствуется при этом интуицией и набором эвристик (находок) — правил, которые обычно помогают в решении задач, хотя эффективность таких правил и не имеет достаточного обоснования.
В связи с этим, необходимо использовать алгоритм нахождения приближенного решения задачи Коммивояжера.  В такую категорию входят генетические алгоритмы, решение которых основывается на постепенном изменении значений популяций.  Эти алгоритмы позволяют находить как глобальный минимум функции, так и максимум, в зависимости от выбора типа селекции.
Эвристические алгоритмы позволяют решать практически любые задачи оптимизации, но их эффективность ниже, чем у локальных методов, что говорит о том, что данные алгоритмы чаще всего применяются к задачам, для которых не разработаны специальные локальные методы или решение такими методами являются неэффективными при заданных параметрах.
В общем случае задача коммивояжера – это задача отыскания кратчайшего гамильтонова цикла в полном графе.
Существует несколько частных случаев общей постановки задачи, в частности:
1.  Геометрическая задача коммивояжера (планарная или евклидова, когда матрица расстояний отражает расстояния между точками на
плоскости);
2.  Треугольная задача коммивояжера (когда на матрице стоимостей выполняется неравенство треугольника);
3.  Симметричная задача коммивояжера (неориентированный граф);
4.  Ассиметричная задача коммивояжера (ориентированный граф);
5.  Обобщенная задача коммивояжера.