921
РАЗРАБОТКА АДАПТИВНОГО ВЕБ-ЧАТА
3. Безопасность веб-приложений .
----------
При разработке веб-чата было уделено большое внимание безопасности веб-приложения. Был рассмотрен список из самых опасных векторов атак на веб-приложения, созданный OWASP (Open Web Application Security Project). Далее будут описаны те уязвимости, которые были обнаружены в процессе разработки веб-чата и его тестировании.
3.1  Небезопасные прямые ссылки на объекты
Данный вид уязвимости является следствием недостаточной проверки пользовательских данных или неправильной реализации методов работы с информационными объектами и может привести к тому, что авторизованный пользователь веб-приложения может получить неавторизованный доступ к привилегированным функциям и данным. Суть уязвимости заключается в том, что при выводе каких-либо конфиденциальных данных, например, личных сообщений, для доступа к объекту используется идентификатор, который передается в открытом виде в адресной строке браузера, и не реализована проверка прав доступа к объектам. Например, есть страница, которая отображает личное сообщение и она имеет адрес вида:
example.com/message.php?mid=1234, перебирая число после "mid=" можно будет читать чужие личные сообщения. Эксплуатация данной уязвимости очень проста и не требует никаких специальных навыков – достаточно лишь перебирать число в адресной строке браузера.
При разработке чата были устранены подобные уязвимости, например, доступ к нескольким комнатам одновременно.
3.2   Небезопасная конфигурация
Безопасность веб-приложения требует наличия безопасной конфигурации всех компонентов инфраструктуры: компонентов приложения (например, фреймворки), веб-сервера, сервера баз данных и самой платформы. Настройки компонентов сервера по умолчанию зачастую небезопасны и открывают возможности к атакам. Например, кража сессионной cookie через JavaScript при XSS-атаке становится возможна благодаря выключенной по умолчанию настройке cookie_httponly. При правильной настройке сервера и включенной опции cookie_httponly, получить сессионную cookie через JavaScript невозможно.
Кроме того, программное обеспечение должно быть в актуальном состоянии: уязвимости находят каждый день в самых различных программных компонентах – операционной системе, веб-серверах, серверах баз данных, почтовых серверах и т.д. И даже если приложение правильно написано и тщательно проверяет все входящие данные, и вообще, хорошо защищено, это не означает что в один момент не найдется уязвимость в ОС или веб-сервере. Примером данной уязвимости является вывод сообщений об ошибках, таким образом злоумышленник может лучше понять структуру базы данных и с помощью ошибок понять, в каком направлении лучшее действовать, какие команды и сценарии лучше пытаться внедрять. Например, сообщение об ошибке может информировать злоумышленника о том, что в результате выполнения вредоносного SQL-запроса было получено верное имя базы данных, но неверное количество полей.
В веб-чате была учтена данная уязвимость и проведена настройка соответствующих параметров веб-сервера.
3.3   Отсутствие функций контроля доступа
Суть уязвимости заключается в отсутствии проверки наличия надлежащего доступа к запрашиваемому объекту. Большинство веб-приложений проверяют права доступа, прежде чем отобразить данные в пользовательском интерфейсе. Тем не менее, приложения должны выполнять те же проверки контроля доступа на сервере при запросе любой функции. Ведь есть еще множество вспомогательных служебных запросов, которые, зачастую отправляются в фоновом режиме асинхронно, при помощи технологии AJAX. Если параметры запроса недостаточно тщательно проверяются, злоумышленники смогут подделать запрос для доступа к данным без надлежащего разрешения.
В начальной версии чата было обнаружено множество уязвимостей данного типа, все они были устранены путем добавления функции проверки прав доступа, которая выполняется при вызове любых других функций чата.
3.4   Использование компонентов с известными уязвимостями
Любой сторонний компонент веб-приложения – будь то двоичный или исходный код, коммерческое или приложение с открытым кодом – должны проверяться на отсутствие уязвимостей. Зачастую веб-приложения написаны с использованием специальных библиотек или «фреймворков», которые поставляются сторонними компаниями. В большинстве случаев эти компоненты имеют открытый исходный код, а это означает, что они есть у миллионов людей во всем мире, которые изучают исходный код, в том числе, и на предмет уязвимостей. Также уязвимости ищут (и находят) в более низкоуровневых компонентах системы, таких как сервер базы данных, веб-сервер, и наконец, компоненты операционной системы вплоть до ее ядра.
Очень важно использовать последние версии компонентов и следить за появляющимися известными уязвимостями на специально предназначенных для этого сайтах. Например, в 2014 году в нескольких версиях библиотеки OpenSSL (криптографический пакет с открытым исходным кодом для работы с SSL/TLS) была обнаружена критическая уязвимость Heartbleed, которая позволяла несанкционированно читать память на сервере или на клиенте, в том числе для извлечения закрытого ключа сервера.
3.5   Непроверенные переадресации и пересылки
Веб-приложения зачастую переадресуют пользователя с одной страницы на другую. В процессе могут использоваться ненадлежащим образом проверяемые параметры с указанием страницы конечного назначения переадресации. Без соответствующих проверок, атакующий может использовать такие страницы для переадресации жертвы на вредоносную веб-страницу, которая, к примеру, может иметь очень схожий или неотличимый интерфейс, но украдет ваши данные.
Данный вид уязвимостей схож с тем, который описан в пункте №3, соответственно и устранить данную уязвимость можно таким же способом.
3.6   Инъекции
Все данные, как правило, хранятся в специальных базах, обращения к которым строятся в виде запросов, чаще всего написанных на специальном языке запросов SQL (Structured Query Language – структурированный язык запросов). Приложения используют SQL-запросы для того, чтобы получать, добавлять, изменять или удалять данные, например, при редактировании пользователем своих личных данных или заполнении анкеты на сайте. При недостаточной проверке данных от пользователя, злоумышленник может внедрить в форму веб-интерфейса приложения специальный код, содержащий SQL-запрос. Такой вид атаки называется инъекцией, в данном случае самый распространённый — SQL-инъекция. Это опаснейшая уязвимость, позволяющая злоумышленнику получить доступ к базе данных и возможность читать/изменять/удалять информацию, которая для него не предназначена.
Эта уязвимость является следствием недостаточной проверки данных, поступающих от пользователя. В целом эта разновидность атак имеет общее название «Ошибки валидации», к ней относятся далеко не только SQL-инъекции.
Подробно SQL-инъекции были рассмотрены в предыдущей курсовой работе, а также была проведена работа по устранению данной уязвимости.
Одна-единственная уязвимость в веб-приложении может привести к глобальной утечке данных, которая может разрушить до основания даже самую большую компанию, вызвав негативные отзывы в средствах массовой информации по всему миру, серьезные финансовые санкции и потерю общественного доверия. Для защиты веб-приложений сегодня используются общепринятые стандарты и методы, такие как OWASP. Также популярны и инструменты поиска уязвимостей, такие как IBM Rational AppScan.