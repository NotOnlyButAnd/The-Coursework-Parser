916
РАЗРАБОТКА СИСТЕМЫ МОДЕЛИРОВАНИЯ AD HOC СЕТЕЙ В НЕВЫПУКЛЫХ ОБЛАСТЯХ 
4 Программирование для мобильных платформ 
4.1 Общие сведения о мобильной разработке . 
----------
Разработка приложений для мобильных платформ является одним из ведущих направлений в мире IT в настоящее время.  Android – мобильная операционная система, основана на ядре Linux и собственной реализации виртуальной машины Java от Google. Но несмотря на то, что платформа основана на ядре Linux, она имеет много уязвимостей. Платформа развивается со стремительной скоростью и по возможностям не уступает даже ПК, В настоящее время разработка под эту мобильную ОС является одной из основных тенденций в мире разработки вообще. ОС предоставляет пользователям возможность работы с сетью интернет, службами геолокации, Wi-Fi, Bluetooth и протоколы передачи данных через сотовую сеть (GPRS, EDGE, 3G и др.).
Android содержит встраиваемый браузер на базе WebKit - того же механизма с открытым исходным кодом, который лежит в основе браузера Safari для iOS.
Приложения, написанные для Android, состоят из следующих элементов:
* Активити(Activity) – это экраны, которые видит пользователь, при работе с приложениями.
* Фрагменты (Fragment) - это модули, содержащие графический интерфейс, которые встраиваются в активити. За счет использования фрагментов, приложения проще разрабатывать, т.к фрагмент имеет собственную логику и может быть переиспользован. Зачастую, активити может содержать несколько фрагментов.
* Сервисы (Services) - сервисы отвечают за работу функций приложения в фоне. Они могут продолжать работать, даже когда пользователь не взаимодействует с приложением.
* Сервисы применяются при длительных операциях взаимодействия с сетью, мониторинга ресурсов или для фоновой проверки обновлений.
* Источники данных (Content providers) - источник данных можно представить себе как сервер баз данных. Его задача - управление доступом к хранящимся данным, таким как база данных SQLite. Если приложение совсем простое, источник данных создавать не обязательно. Если вы пишете более сложное приложение или приложение, в котором к данным обращается несколько действий или приложений, источник данных служит средством организации доступа к вашей информации.
* Приемники (Broadcast receivers) - Android-приложение может запускаться для обработки элемента данных или реагирования на события, например, на получение текстового сообщения.
Приложение для Android обязательно должно иметь файл AndroidManifest.xml, в котором содержится основная информация о приложении и его конфигурации для правильной установки приложения на устройстве пользователя. В манифесте описывается такая информация, как: необходимые имена классов и типы событий, которые может обрабатывать приложение, разрешения, требуемые для его работы. Так, если приложению нужен доступ к сети – например, чтобы загрузить файл, - соответствующее разрешение должно быть явно указано в файле манифеста. Такая защита путем декларирования помогает уменьшить вероятность повреждения устройства по вине некорректно написанного приложения. Стоит отметить, что система разрешений изменилась с выходом Android 6.0 и разрешения,
запрашиваемые 	приложением 	не 	отображаются 	при 	установке, 	а запрашиваются в режиме реального времени. Т.е. приложение должно иметь минимум разрешений, необходимых для работы, т.к. пользователь вправе отказать приложению на запросы некоторых разрешений, например если он не хочет давать доступ камере к своему местоположению.
Для разработки под Android необходима IDE и Android SDK, знание языка программирования Java и языка XML для создания макетов интерфейсов. Неотъемлемой частью разработки является запуск приложений, поэтому также необходимо реальное устройство, либо эмулятор. Особо популярны два эмулятора: Genymotion, Android Studio Emulator 2.0.
* Genymotion – это быстрый эмулятор Android, который включает в себя настроенные образы Android (x86-с аппаратным ускорением OpenGL), идеальный для тестирования приложения. К минусам этого эмулятора можно отнести нестабильность: эмулятор запускается далеко не с первого раза, а в некоторых случаях количество неудавшихся попыток запуска достигает 10!
* Android Studio Emulator 2.0 – это относительно новый сверхбыстрый эмулятор, выпущенный компанией Google и поставляемый вместе со средой программирования Android Studio 2.0.
Разработчики уверяют, что по сравнению со старым эмулятором, новый работает до 10 раз быстрее и также приложения устанавливаются на него до 3 раз быстрее.
К минусам этого эмулятора можно отнести требовательность к ресурсам: для комфортной разработки в Android Studio и отладки на этом эмуляторе нужно не менее 8гб оперативной памяти и процессора не менее чем с 4 ядрами.
При работе над дипломным проектом используются все три варианта тестирования: два эмулятора и реально устройство (Google Nexus 5).
Разработчик приложений должен хорошо знать особенности ОС Android и помнить о сегментации устройств и различных версий ОС. Существуют некоторые трудности, которые нужно учитывать при разработке:
1)  Приложение требует для установки в два раза (или даже в четыре) больше места чем оригинальный размер приложения.
2)  Скорость работы с файлами на встроенной флэшке падает в десятки раз при уменьшении свободного места.
3)  Каждый процесс может использовать до 16 Мб (иногда 24 Мб) оперативной памяти.
4)  Зачастую один и тот же код или элемент интерфейса ведет себя поразному на разных устройствах и версиях Android. Несмотря на разработку библиотеки поддержки Support Library, этот пробел не удается устранить полностью.
5)  Всегда найдется специфическое устройство, на котором приложение работает совершенно не так, как задумано. Из этого вытекает пункт 6.
6)  Сложность отладки. Как правило, средний разработчик не может протестировать приложение на всех доступных устройствах по причине их многообразия и собственно, отсутствия в наличии их у разработчика.
Существует два способа разработки для мобильных устройств:
написание нативных приложений и использование кроссплатформенного движка.
Нативным способ – написание приложений на родной языке программирования для платформы. Для Android это Java и Android SDK.
Такой способ наиболее гибкий и удобный, и производительный. Но недостаток его в том, что целевая платформа только одна. Нативный способ разработки стоит выбирать в том случае, если перенос приложения на другие платформы не планируется.
Кроссплатформенный способ – при выборе этого способа, приложения разрабатываются сразу для нескольких платформ (Android, iOS, WP). Такие приложения имеют набор общей логики, общий интерфейс, но мелкие детали приходится дорабатывать в зависимости от платформы. Кроссплатформенная разработка более подвержена ошибкам, чем нативный способ. Также, количество документации к кроссплатформенным средствам существенно ниже, чем к нативным. К крассплатформенным средствам разработки можно отнести такие как Xamarin от Microsoft, Apache Cordova, Phonegap, также
Microsoft сделала недавно возможной кроссплатформенную разработку в IDE Visual Studio.