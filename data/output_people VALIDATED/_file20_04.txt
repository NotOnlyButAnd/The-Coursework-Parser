402
ТЕХНОЛОГИИ РАЗРАБОТКИ WEB-ПРИЛОЖЕНИЙ
1 Технологии разработки Web-приложений 
1.2 Серверные Web-технологии 
1.2.1 Паттерны MVC, MVP и MVVM 
----------
С течением времени разрабатываемые Web-приложения становятся больше и сложнее. Вместо одной сплоченной группы разработчиков, работающей над проектом, собирается много разных групп, каждая из которых отвечает за определенную область, будь то GUI, бизнес-логика или другие компоненты, стали использоваться специальные люди, ответственные за анализ и тестирование разрабатываемого Web-сайта или иного программного обеспечения, вследствие чего стоимость реализации таких задач существенно возрастает. Учитывая желание уменьшения трудозатрат на решение такого рода задач, становится ясно, что необходимо использовать готовые унифицированные решения – паттерны [3]. Рассмотрим три основных паттерна:
1)  Model-View-Controller разделяет приложение на три основных части (см. рисунок 1): модель (model), представление (view) и контроллер (controller) – таким образом, что изменение любого компонента может осуществляться независимо друг от друга. Используется в ситуации, когда связь между представлением и другими частями невозможна.
Рисунок 1 – структура MVC шаблона
Модель предоставляет данные и методы работы с ними, не зависит от представления и контроллера, то есть не знает, как визуализировать данные и не взаимодействует с пользователем. Представление отвечает за отображение пользователю необходимых данных на экране, может влиять на контроллер. Контроллер обрабатывает действия пользователя и определяет какое именно представление View должно быть отображено в данный момент.
2)  Model-View-Presenter является производной от MVC и используется в основном для построения пользовательского интерфейса. Структура такого шаблона представлена на рисунке 2. MVP используется в том случае, когда у разработчика нет возможности связать данные [4].
Рисунок 2 – структура MVP шаблона
Вместо контроллера здесь используется представитель (presenter), являющийся посредником между представлением и моделью. Его действия заключаются в получении входных данных от пользователя через представление (view), их обработки с помощью методов модели и передачи обратно пользователю в удобном для него виде через представление.
3)  Model-View-View-Model поддерживает двустороннюю привязку данных между представлением (view) и моделью представления (View-model), что позволяет с изменением View-model автоматически изменять также и View (см. рисунок 3). MVVM используется в ситуации, когда у разработчика есть возможность связывания данных.
Рисунок 3 – структура MVVM шаблона
View-model не может обращаться напрямую к view. Вместо этого она представляет легко связываемые свойства и методы в виде команд. View может привязываться к этим свойствам и командам, чтобы получать информацию из View-model и вызывать на ней методы [5].
Подводя итоги, стоит отметить, что раньше для создания качественного и крупного Web-приложения могло хватить знаний HTML, CSS, JavaScript и PHP, однако сейчас на основе выше перечисленных шаблонов появляется возможность создавать более мощные приложения за то же время, если даже не быстрее. Такие технологии диктуют будущее Web-программирования, упрощая однотипную рутинную работу, и без них не обойтись.