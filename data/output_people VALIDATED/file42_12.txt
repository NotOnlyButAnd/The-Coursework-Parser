453
РАЗРАБОТКА ПРОГРАММНОГО АГЕНТА ДЛЯ ИНФОРМАЦИОННОГО ПОИСКА В СРЕДЕ ИНТЕРНЕТ 
3 Процесс сериализации . 
3.1 Сериализация и десериализация 
----------
Сериализация – это процесс преобразования структур данных или состояний объекта в формат, который может храниться (например, в файл или в буфер памяти, или в переданные по ссылке сети связи).
Десериализация - обратный процесс - восстановление объекта из потока байт или XML узлов.
Сериализация обычно используется для передачи объектов по сети или за границы приложения, для сохранения объектов внутри файлов или базы данных, а также для глубокого копирования объектов.
Классы для сериализации располагаются в двух пространствах имен:
System.Runtime.Serialization и System.Xml.Serialization.
Рисунок 2  - Сериализация  и десериализация.
Процесс сериализации осуществляется  форматорами. В процессе сериализации данные, которые преобразованы форматорами  в  нужный формат  записываются  в поток.  Если идет процесс десериализации, то данные, которые читаются из потока   с помощью  форматоров  пишутся на объект.
Сериализованный объект,  записанный  на поток, не только сохраняет информацию об объекте, а  также  содержит его тип и  версию.
С помощью сериализации разработчики смогут:
1.  Отправлять  объекты  к удаленному приложению.
2.  Отправлять  объекты  с одного домена к  другому.
3.  Отправить объекты  через брандмауэр как XML или переносить           конкретные данные об объектах между приложениями.
Для сериализации объекта  в начале необходимо  задать объекту соответствующий тип,  так чтобы можно было применить к нему процесс сериализации.   Затем, преобразовав его  в  другой формат  с помощью  форматорам,   запишем  его на стрим, получим сериализованный объект.
Пространство 	имен 	System.Runtime.Serialization 	содержит 	классы, которые можно использовать для сериализации и десериализации объектов.
При сериализации все сериализуемые поля объекта класса и их значения (т. е. не помеченные как NonSerialized) сохраняются в файл. Удобно, когда заранее известно, какие данные понадобиться хранить в файле (и какие соответственно поля должен иметь класс), и когда возможны дальнейшие доработки (добавить какое-то поле или удалить). Для этого используется класс SerializableAttribute.  Если попытаться сериализовать помеченный объект  этого  класса, то получим ошибку SerializationException.
Если понадобится сериализовать в классе SerializableAttribute то нужно его пометить NonSerializedAttribute. А если сериализуемый объект имеет типы указателей, класс handle или при сериализации эти данные будут непригодными 	в 	других 	средах 	так 	же 	используем 	пометку
NonSerializedAttribute. Когда все типы сконфигурированы для участия в
схеме сериализации .NET с применением необходимых атрибутов, следующий шаг состоит в выборе формата (двоичного, SOAP или XML) для сохранения состояния объектов. Перечисленные возможности представлены следующими классами:
* BinaryFormatter
* SoapFormatter
* XmlSerializer
* СustomSerialization (protobuf.net, NewtonSoft.Json)
При создании новых классов для сериализации обращается внимание:
* Созданный класс будет ли передавать application domains;
* Созданный класс будет ли использован c remoting или WCF;
* В классе объект будет ли предоставляться с постоянного источника.
* Если объект абстрактный то, будут ли сериализоваться классы образовывающейся в этом же классе.
На что следует обратить внимание при выборе сериализатора, на содержание объектов и способ сериализации. Если работать с большими объемами, то XML-сериализация не будет верным выбором. Потому что, преобразовав данные в XML,  объем увеличивается, а скорость отправления снижается. В такой ситуации, лучшие способы, BinaryFormatter или SOAP.