597
РАЗРАБОТКА СИСТЕМЫ МОДЕЛИРОВАНИЯ AD HOC СЕТЕЙ В НЕВЫПУКЛЫХ ОБЛАСТЯХ 
2 Способы и технологии параллельного программирования . 
2.1 Общие сведения о параллельном программировании 
----------
Параллельное программирование – способ написания компьютерных программ, при котором программы разрабатываются как набор вычислительных процессов, взаимодействующих друг с другом и работающих одновременно, то есть параллельно.
Параллельные программы могут физически исполняться либо последовательно на единственном процессоре — перемежая по очереди шаги выполнения каждого вычислительного процесса, либо параллельно — выделяя каждому вычислительному процессу один или несколько процессоров (находящихся рядом или распределённых в компьютерную сеть).
Главная сложность при планировании архитектуры параллельных вычислений – обеспечение правильной и корректной последовательности взаимодействий между различными параллельными вычислительными процессами, а также распределение ресурсов между процессами и их обмен.
Программа, выполняемая параллельно, примерно выглядит следующим образом:
Рисунок 2 – структура параллельной программы.
Как видно на рисунке – определенные области программы выполняются в несколько потоков. При завершении этапа вычислений, нити потоков соединяются, происходит синхронизация, далее вычисления разделяются снова.
При написании параллельных программ требуется особое внимание работе с данными. При неправильной проектировании программы возникают следующие ошибки:
* Гонка данных:
Эта ошибка возникает в случае одновременной попытки изменения разыми процессами некоторой общей области данных. Конечное значение будет неправильным и будет зависеть от того, какой процесс взаимодействовал с ней последним. В случае, когда несколько задач попытаются обновить один и тот же ресурс данных, такое состояние «гонок» называют «гонкой»данных (data race).  Для решения этой проблемы следует ввести «критические секции», то есть области, в которых в момент времени должен работать только один процесс, а остальные должны находиться в ожидании в этот момент времени, пока взаимодействующий с областью данных процесс не закончит свою работу. После чего начать выполнять критическую секцию сможет другой поток. Такая схема работы называется "блокировкой" потоков.
* Дедлок:
Клинч, дедлок (deadlock) - разные названия одной из самых серьезных проблем, возникающих при параллельном программировании.  Такая ошибка может возникнуть в том случае, когда несколько потоков пытаются получить общие ресурсы в один момент времени. При клинче каждый из потоков успевает захватить один из общих ресурсов. Для окончания работы каждому потоку необходимы другие ресурсы, захваченные другими потоками. В результате, никто из потоков не может завершить свою работу, все стоят в очередях, которые не двигаются, - работа замирает – приложение "зависает". Это худшее, что может случиться с приложением.
Способы синхронизации параллельного взаимодействия:
* Взаимодействие через разделяемую память: на каждом процессоре мультипроцессорной системы запускается поток исполнения, который принадлежит одному процессу. Потоки обмениваются данными через общий для данного процесса участок памяти. Количество потоков соответствует количеству процессоров.
* Взаимодействие c помощью передачи сообщений: на каждом процессоре многопроцессорной системы запускается однопоточный процесс, который обменивается данными с другими процессами, работающими на других процессорах, с помощью сообщений. Процессы создаются явно, путем вызова соответствующей функции операционной системы, а обмен сообщениями — с помощью библиотеки (например, реализация протокола MPI), или с помощью средств языка.
* Гибридный способ: на многопроцессорных системах с распределённой памятью (DM-MIMD), где каждый узел системы представляет собой мультипроцессор с общей памятью (SM-MIMD), можно
использовать гибридный метод программирования[4]. На каждом узле системы запускается многопоточный процесс, который распределяет потоки между процессорами данного узла. Обмен данными между потоками на узле осуществляется через общую память, а обмен данными между узлами — через передачу сообщений. В этом случае количество процессов определяется количеством узлов, а количество потоков — количеством процессоров на каждом узле. Гибридный способ программирования более сложен (требуется особым образом переписывать параллельную программу), но наиболее эффективен в использовании аппаратных ресурсов каждого узла многопроцессорной системы.
Разумеется, в такой системе можно также использовать и исключительно метод передачи сообщений, то есть запустить на каждом процессоре каждого узла отдельный процесс. В этом случае количество процессов (и потоков) будет равно количеству процессоров на всех узлах. Этот способ проще (в параллельной программе надо только увеличить количество процессов), но является менее эффективным, так как процессоры одного и того же узла будут обмениваться друг с другом сообщениями, словно они находятся на разных машинах.