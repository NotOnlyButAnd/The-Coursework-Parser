321
Изучение организации многопоточности в Java и Python
1. Основные определения и понятия, принятые в параллельном и распределенном моделировании 
1.2. Понятия многопоточности, многозадачности и многопроцессорности 
----------
Следует различать такие понятия как:
* Многозадачность: возможность одновременного выполнения нескольких задач (браузер, текстовый редактор, музыкальный проигрыватель).
* Многопоточность: процесс одновременного выполнения нескольких потоков. Многопоточность также называют многозадачностью на основе потоков.
* Многопроцессорность: это то же самое, что и многозадачность, однако при многопроцессорной обработке задействовано более одного процессора в то время как в многозадачности может быть задействован один процессор.
* Параллельная обработка: использование нескольких процессоров в одной компьютерной системе.
Рассмотрим понятие многопоточности.
В современных программах постоянно используется многопоточность, если бы это было не так, то все операции, которые совершал бы пользователь занимали бы гораздо больше времени.
Например, у нас есть сервер, который принимает заявки, обрабатывает их и отправляет ответ. Не будем учитывать время принятия заявки и отправки ответа. Пусть время обработки заявки составляет 5 секунд. Тогда при последовательной работе нашего сервера время обработки 10 заявок составляло бы 50 секунд. Однако, если мы будем использовать многопоточность, то каждую заявку может обрабатывать новый поток (обычно поток обрабатывается ядром процессора, а если все ядра заняты, то создаётся очередь). Время обработки заявок в этом случае (при одном четырёхядерном процессоре) составит около 15 секунд, что более чем в три раза быстрее последовательной версии.
Многопоточность используется для эффективного использования вычислительных ресурсов компьютера. Ведь в последовательной реализации программы присутствует один (главный) поток, а значит все остальные процессоры (ядра этих процессоров) находятся в бездействии (относительно данного процесса).
Одним из главных объектов применения являются компьютерные игры. Так происходит из-за того, что объём данных для обработки постоянно растёт и как бы быстро не развивалось «компьютерное железо» приходится всё равно оптимизировать код так, чтобы он потреблял максимум вычислительных ресурсов.
У многопоточности есть свои недостатки:
* Усложнение кода и его читабельности
* Усложнение процесса отладки
* Увеличение количества скрытых ошибок, которые не всегда выявляются при отладке
* Снижение предсказуемости в работе программы, так как порядок выполнения некоторых операций заранее не известен и программа на разных машинах в разных условиях работает по-разному.
Программист должен понимать, когда нужно реализовывать многопоточность, а когда она только навредит.