222
Изучение организации многопоточности в Java и Python
3. Многопоточность в Java 
3.3. Приоритеты потоков 
----------
У каждого потока Java есть приоритет, который помогает операционной системе определить порядок, в котором запланированы потоки. Приоритеты потоков Java находятся в диапазоне между MIN_PRIORITY (константа 1) и MAX_PRIORITY (константа 10). По умолчанию каждому потоку присваивается приоритет NORMAL_PRIORITY (константа 5).
Потоки с более высоким приоритетом более важны для программы и должны быть выполнены раньше, чем потоки с более низким приоритетом. Однако приоритеты потоков не могут гарантировать порядок, в котором выполняются потоки, и в значительной степени зависят от операционной системы.
Методы потоков
* getName(): получение имени потока
* setName(): установка имени потока
* getPriority(): получение приоритета потока
* isAlive(): определяет, работает ли поток
* join(): текущий поток вызывает этот метод в другом потоке, блокируя текущий поток, пока другой поток не завершится или не пройдет указанное число миллисекунд
* sleep(): приостанавливает поток на указанное время
* start(): инициализация потока и запуск его метода run()
* yield(): заставляет процессор переключиться на обработку других потоков системы.
Как и в Python в Java есть особый вид потоков, которые называются демонами. Объявить поток демоном достаточно просто — нужно перед запуском потока вызвать его метод setDaemon(true). Проверить, является ли поток демоном, можно вызвав его метод isDaemon (). Если завершился последний обычный поток процесса, и остались только потоки-демоны, то они будут принудительно завершены и выполнение процесса закончится. Чаще всего потоки-демоны используются для выполнения фоновых задач, обслуживающих процесс в течение его жизни.