579
РАЗРАБОТКА МОБИЛЬНОГО ПРИЛОЖЕНИЯ МНОГОЗВЕННОЙ АРХИТЕКТУРЫ НА БАЗЕ ОПЕРАЦИОННОЙ СИСТЕМЫ ANDROID
2 Модель многозвенной архитектуры приложения 
2.2 Сравнение с другими видами архитектур 
----------
Архитектура приложения характеризует все важные проектные решения в плане структур программы и взаимодействия между этими структурами. Проектные решения раскрывают необходимые свойства для приложения, которые используются приложением для его успешного функционирования. Также они формируют основу для разработки приложения, его поддержки и обслуживания.
Архитектура приложения включает в себя не только структурные и поведенческие особенности приложения, но и правила взаимодействия приложения с другими системами, а также производительность, гибкость, функциональность, надежность, экономические и технологические ограничения, возможность повторного использования, а также представление пользовательского интерфейса.
Выделяют 4 основных вида архитектур приложений, которые отличаются количеством входящих в них звеньев:
а) однозвенная архитектура;
б) двухзвенная архитектура;
в) трехзвенная архитектура;
г) многозвенная архитектура.
Однозвенная архитектура приложения подразумевает собой то, что все три звена или уровня (уровень пользовательского интерфейса, уровень обработки запросов и уровень данных) являются частью одной и той же программы, то есть находятся в одном звене. Здесь в качестве клиента выступает обычный пользовательский интерфейс, представляющий собой терминал, для которого доступен только ввод команд оператора и экран для отображения ответов от вычислителя. Схема однозвенной архитектуры представлена на рисунке 6.
Рисунок 6 – Однозвенная архитектура приложения
К достоинствам однозвенной архитектуры можно отнести то, что объединение уровней может привести к повышению эффективности приложения. Обычно в таких приложениях расходы на переключение контекста и переходы между компонентами сведены к минимуму. Так же для приложений однозвенной архитектуры не требуется специально разрабатывать клиентскую часть, что снижает затраты на внедрение и поддержку.
К недостаткам однозвенной архитектуры приложений относится то, что их сопровождение достаточно трудно и затратно.
Двухзвенные архитектуры имеют популярность в представлении в виде архитектур клиент/сервер. В зависимости от сложности клиентской программы ее называют тонким клиентом, если она выполняет минимальный набор функций, и толстым клиентом, если набор функций достаточно широк.
Схема двухзвенной архитектуры представлена на рисунке 7.
Рисунок 7 – Двухзвенная архитектура приложения
В скором времени был предложен некий компромисс между тонким и толстым клиентом, которые носит название «rich»-клиента. Как и тонкий клиент, rich-клиент также реализует графический интерфейс, который описывает средствами XML и включает в себя некоторый набор функций, присущих толстому клиенту. Прикладная логика rich-клиента реализована на сервере и данные при этом передаются в стандартном формате на основе XML и принимаются клиентом.
К достоинствам двухзвенных архитектур относят объединение прикладной логики и управление ресурсами, что позволяет выполнять главные вычисления достаточно быстро, так как переключение контекста не происходит. Также двухзвенные системы намного более мобильны, так как уровень сервера в них отделен от уровня пользовательского интерфейса.
Недостатком двухзвенной архитектуры приложения является то, что существует ограничение на взаимодействие сервера с несколькими клиентами одновременно.
Трехзвенные архитектуры приложений представляют собой некое расширение архитектур клиент/сервер. В трехзвенной архитектуре приложения все уровни архитектуры четко разделены между собой. Уровень пользовательского интерфейса размещается на клиенте, как и в двухзвенной архитектуре. Прикладная логика размещается в среднем звене на сервере приложений. Уровень данных располагается в третьем звене и состоит из всех серверов, которые взаимодействуют с приложением. Схема трехзвенной архитектуры приложения обозначена на рисунке 8.
Рисунок 8 – Трехзвенная архитектура приложения
К достоинствам трехзвенной архитектуры относят:
а) возросшие возможности по масштабированию (каждый уровень
приложения может работать на отдельной вычислительной машине);
б)  не требуется определять интерфейсы уровня обработки запросов, так
как в трехзвенной архитектуре уровень данных стандартизирован;
в) потери в производительности компенсируются распространением
модели уровня обработки запросов на разные сетевые узлы.
К недостаткам трезвенных архитектур относят ограниченность совместного использования нескольких трехзвенных систем.
Многозвенные архитектуры не сильно отличаются от трехзвенных архитектур приложений. В многозвенной архитектуре важное место имеет доступ к данным через сеть Интернет.
Многозвенные архитектуры разрабатываются в основном для двух ситуаций:
- объединение разнородных систем; - подключение к Интернету.
Отдельные звенья многозвенной системы сами являются двух- или
трехзвенными системами