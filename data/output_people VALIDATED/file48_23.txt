900
РАСПРЕДЕЛЕННАЯ ANDROID-СИСТЕМА «АССИСТЕНТ ПРЕПОДАВАТЕЛЯ» 
3 Программная реализация приложения КубГУ Assistent 
3.4 Выбор формата обмена данными . 
----------
В настоящее время существует несколько популярных форматов обмена данными между серверами и клиентами. Во время разработки распределенной системы была поставлена задача выбор оптимального способа обмена данными, который бы удовлетворял следующим параметрам:
* простой и компактный способ представления данных;
* текст должен быть представлен в читаемом виде как для
разработчика, так и для компьютера;
* возможность преобразовывать передаваемую информацию на различных платформах, с использованием различных языков
программирования;
* безопасность;
* простота обработки как на стороне сервера, так и на стороне клиента.
Для того, чтобы найти наиболее подходящее решение, было рассмотрено четыре самые популярные на текущий момент архитектуры.
RPC (Remote Procedure Call, сервис вызова удаленных процедур) представляет собой интерфейс между клиентами и определенными программами сервер, которые запускаются по запросам клиентов. Обычно реализация RPC технологии включает в себя два компонента: сетевой протокол для обмена в режиме клиент-сервер и язык сериализации объектов. Различные реализации RPC имеют сильно отличную друг от друга архитектуру, связано это с тем, что одни реализуют архитектуру SOA (service-oriented architecture, модульный подход к разработке), другие CORBA (Common Object Request Broker Architecture, общая архитектура брокера объектных запросов) или DCOM (Distributed COM). На транспортном уровне RPC используют в основном протоколы TCP (протокол управления передачей) и UDP (протокол пользовательских дейтаграмм), но некоторые построены на основе HTTP.
Протокол RPC построен на модели вызова удаленных процедур, подобно механизму вызовов локальных процедур. При вызове локальных процедур, аргументы помещаются в некоторую область памяти, а затем управление передается процессом по определенному адресу. После завершения работы, результат читается по конкретному адресу.
Главное отличие работы удаленной процедуры в том, что вызов удаленной функции обслуживают два процесса: клиентский и серверный.
Клиентом отправляется запрос на сервер, который включает в себя параметры вызываемой процедуры (идентификатор процедуры и ее параметры), а затем ожидается ответное сообщение с результатами работы процедуры. В свою очередь сервер постоянно находится в состоянии ожидания, и при поступлении какого-либо запроса, считывает информацию, выполняет процедуру, отправляет ответ и начинает ожидание нового запроса. RPC-протокол не требует синхронности выполняемых функций, так что клиент может выполнять новый запрос, не дожидаясь ответа от предыдущего. Для каждого запроса выделяется отдельный процесс, поэтому не дожидаясь окончания работы предыдущих запросов, сервер RPC может принять следующие запросы.
К преимуществам RPC архитектуры можно отнести отсутствие ограничений на набор команд, установление соединений и хранение состояния на сервере. К недостаткам же относится сложность разработки, отладки и внедрения.
Описанная архитектура является единственным средством разработки прикладных, промышленных и других сложных систем.
REST является еще одним архитектурным стилем взаимодействия компонентов распределенного приложения. Данная технология получила широкое распространение как более простая альтернатива сервисам, основанным на SOAP. Системы, которые поддерживают технологию REST, называют RESTful-системами, а первый термин REST был введен в 2000 году одним из авторов HTTP протокола Роем Филдингом.
Первичным ключом для единицы данных можно считать URL, так как каждая единица информации однозначно определяется URL. Например, если нужно получить название пятой книги с книжной полки, то запрос будет иметь вид /book/5, а если интересует еще и, например, 99 страница, то запрос будет иметь уже следующий вид: /book/5/page/99. Преимуществом такого подхода является то, что совершенно не имеет значения, в каком формате находятся данные по запрашиваемому URL – это может быть и HTML
страница, и просто текст, и отсканированная страница и любой другой файл в любом расширении.
REST предлагает разработчикам использовать HTTP протокол и
методы входящие в состав протокола. Подобный принцип проектирования REST устанавливает однозначное соответствие между операциями create, read, update, delete (CRUD) и HTTP-методами согласно следующим соответствиям:
* для добавления данных используется POST;
* для извлечения данных используется GET; - для обновления данных используется PUT;
* для удаления данных используется DELETE.
REST очень прост в использовании, а по виду пришедшего запроса можно сразу определить что он делает и какие данные получает. К другим же преимуществам данной архитектуры можно отнести следующее:
* простота;
* открытость и возможность изменения согласно требованиям;
* устойчивость к отказам на уровне системы при наличии отказов отдельных компонентов или данных.
SOAP – простой протокол доступа к объектам, основанный на обмене структурированными сообщениями в распределенной среде. На данный момент протокол активно используется для обмена произвольными сообщениями в формате XML.
В ходе рассмотрения протокола SOAP были выявлены следующий недостатки:
* во время передачи сообщений с использованием SOAP заметно снижается скорость передачи сообщения и увеличивается его объем;
* многие программы генерируют сообщения в несовместимом с SOAP формате, хотя SOAP является стандартом (это его преимущество).
Пример SOAP-запроса:
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
<soap:Body>
<getProductDetails xmlns="http://warehouse.example.com/ws">
<productID>12345</productID>
</getProductDetails>
</soap:Body>
</soap:Envelope>
Еще один способ передачи данных – передача сообщения в формате XML или JSON в теле HTTP запроса. Для реализации приложения в рамках дипломной работы был выбран данный способ передачи данных в формате JSON. Данный выбор был сделан после глубокого анализа и сравнения форматов XML и JSON.
Одним из главных требований к способу передачи данных было удобочитаемость кода. JSON гораздо проще воспринимается, чем XML.
Данный факт подтверждают следующие примеры:
Пример сообщения в формате JSON:
[
{
"id": 1,
"name": "Kirill Stepanenko",
"group": "46/2",
},
{
"id": 2,
"name": "Sergey Deynega",
"group": "46/1",
}
]
Пример сообщения в формате XML:
<?xml version="1.0" encoding="UTF-8" ?>
<root>
<row>
<id>1</id>
<name>Kirill Stepanenko</name>
<group>46/2</group>
</row>
<row>
<id>2</id>
<name>Sergey Deynega</name>
<group>46/1</group>
</row> </root>
Следующий параметр, который был рассмотрен – простота реализации. JSON имеет довольно простую грамматику, чем и обусловлено большое число реализаций под разные языки программирования. В свою очередь XML имеет довольно сложную грамматику, которая могла бы быть намного проще, если не требование совместимости с SGML (Standard Generalized Markup Language, стандартный обобщенный язык разметки).
От сложности синтаксиса зависит и предельная скорость обработки данных, поэтому можно сделать вывод, что обработка данных упакованных с помощью JSON, происходит быстрее, чем упакованных с помощью XML.