760
МОДЕЛИРОВАНИЕ И ВИЗУАЛИЗАЦИЯ РАЗЛИЧНЫХ СТРАТЕГИЙ SLAM С ПОМОЩЬЮ LIDAR В ПОМЕЩЕНИЯХ ДЛЯ МОБИЛЬНЫХ РОБОТОВ 
3 Реализованный метод 
3.2 Реализация 
3.2.5 Автономное движение робота 
----------
Для того чтобы работ действовал без вмешательства человека, то есть был автономным, необходимо организовать его поведение в окружающей среде. Это является одной из самых сложных задач в данной работе, так как рекомендуется, чтобы робот построил карту всей области, в тоже время не возвращаясь назад, чтобы не было много избыточной информация. Избежание таких возвратов ускорит как работу программы, так и расход ресурсов если применять эти методы для реального робота. Также робот должен объезжать препятствия, так как какое-либо столкновение не особо приветствуется, так как это может создать критическую ситуацию. Существуют способы, когда у робота присутствует датчик касания и робот объезжает таким образом препятствия, но этот тот случай, когда робот не оснащен LIDAR. Для того чтобы предотвратить столкновение с
препятствием необходимо найти максимальное расстояние, на которое может подъехать робот. Для предотвращения этого воспользуемся LIDAR, и если просмотреть расстояния на 0, 45, -45 градусах относительно передней части робота, то в случае если на следующем шаге робот будет на слишком близком расстоянии, то движение вперед невозможно для робота, и ему необходимо либо поворачивать, либо возвращаться назад.
Реализация метода, который позволяет вычислять расстояние до препятствий:
static public int CanMove(List<int> arr, int w){
Boolean f1 = true;             Boolean f2 = true;             for(int i = 0; i < arr.Count()/8; i++){                 if(arr[i] < w){                     f1 = false;
break; }}             for (int i = (arr.Count()/8)*7; i < arr.Count(); i++){                 if (arr[i] < w){                     f1 = false;                     break; }}             for (int i = (arr.Count() / 8) * 3; i < (arr.Count() / 8) * 5; i++){                 if (arr[i] < w){                     f2 = false;                     break;}}             if (!f1 && !f2) return 3;             if (f1 && f2) return 0;             if (!f1 && f2) return 2;             if (f1 && !f2) return 1;             return 0;}
Где arr – список дистанций, полученный с помощью LIDAR, w – расстояние на которое хочет продвинуться робот. В данном методе рассматривается возможность движения робота как вперед, так и назад, в случае если робот может двигаться вперед, метод вернет значение 0, если не может никуда вернет 3, если может вперед, но не может назад вернет 1 и если может назад но не может вперед вернет 2.
В соответствии с рисунком 14 робот имеет квадратную форму, то что выделено кругом вокруг него, это та область, в которую не должны попадать препятствия, так как в случае разворота, робот может столкнуться с ними.
Рисунок 14 – Область робота
Также робот должен выбирать себе маршрут для передвижения, что требует достаточно много тестов, так как оптимальный вариант его движения, в зависимости от окружающей среды те или иные способы могут быть не совсем корректными. В данной работе рассматривается следующая модель, находясь в начальной позиции с мощью данных полученных от LIDAR, вычисляется угол, на котором находится самое большое расстояние, робот поворачивается на этот угол и начинается двигаться в этом направлении объезжая препятствия. Для того чтобы вычислить расстояние, которое должен преодолеть робот на этом шаге, можно вычислять различными способами, например, робот может преодолеть 50 процентов наибольшей дистанции, или любое другое число. В данной работе это расстояние вычисляется с помощью случайных чисел, максимальное расстояние делится на случайное число в пределах от 0.1 до 2.0, так как тесты показали, что преодолевать расстояние меньше половины не лучшее решение, а преодолеть расстояние больше выглядит более эффективнее, но возможно, что при на различных средах результаты могут быть совсем другими. Когда робот проехал необходимое расстояние, вновь вычисляется угол с максимальной дистанцией, но тут необходимы дополнительные условия, так как робот может оказаться на самой большой диагонали, и в случае поворота на 180 градусов, робот будет двигаться только по ней, что возможно не позволит найти другие участки карты. Рассмотрим рисунок 15.
Рисунок 15 – Диагональ движения
Из рисунка видно что, найдя такую диагональ робот будет двигаться только по ней, но если в процессе движения, например, разделить область перемещения робота на 4 части, и рассматривать максимальные расстояния не на всей области, а на промежутках от 0 до 90, от 90 до 180, от 160 до 270 и от 270 до 360 градусов, и искать там максимальные дистанции, то поведение робота будет гораздо эффективнее, и робот сможет попасть в различные участки. Рассмотрим рисунок 16.
Рисунок 16 – Вариация поведения робота
Как мы видим, что если найти наибольшее расстояние не из всей рассматриваемой области, то есть областях A, B, C, D, а рассмотреть каждую область отдельно, и по случаю не возвращать робот назад, так как это дает избыточную лишнюю информацию, то это еще и дает возможность исследовать участки окружающей среды, в которых до этого робот не был.
Таким образом можно подбирать различные стратегии для поведения робота, что позволяет уменьшить количество ненужных действий робота, то есть тех, которое не дают полезной информации, возможно более детально изучить окружающую среду, и разнообразит работу роботу.