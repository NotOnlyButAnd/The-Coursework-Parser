389
ПРОГРАММА КОНТРОЛЯ ДЕЯТЕЛЬНОСТИ СОТРУДНИКОВ ЗА РАБОЧИМ КОМПЬЮТЕРОМ 
2 Выбор средств разработки 
2.5 Шаблон проектирования Model-View-Controller(MVC) . 
----------
Model-View-Controller (MVC) – это шаблон проектирования приложений для разделения кода пользовательского интерфейса и другого кода. С помощью MVC можно декларативно определить пользовательский интерфейс и использовать разметку привязки данных, чтобы связать его с другими уровнями, содержащие данные и команды пользователя. Инфраструктура привязки данных предоставляет свободную взаимозависимость, которая синхронизирует пользовательский интерфейс и связанные данные, а также направляет входные данные пользователя соответствующим командам.
Схема работы MVC приведена на рисунке 2.1. Шаблон MVC
организует код так, что можно менять отдельные его части, не влияя на другие. Это дает много преимуществ, среди которых:
* возможность использования итеративного, произвольного стиля написания кода;
* упрощенное тестирование модулей;
* более эффективное использование инструментов проектирования, например Expression Blend;
* поддержка взаимодействия в команде.
Для сравнения: приложение с более традиционной структурой использует привязку данных только для элементов управления списками и текстом и отвечает на ввод данных пользователем, обрабатывая события, предоставленные элементами управления. Обработчики событий надежно связаны с элементами управления и обычно содержат код, который непосредственно управляет пользовательским интерфейсом. Из-за этого сложно или невозможно заменить элемент управления без вынужденного обновления кода обработки события.
Рисунок 2.1- Схема работы Model-View-Controller
При использовании шаблона MVC приложение делится на следующие уровни.
Уровень модели включает весь код, реализующий основную логику программы и определяет типы, необходимые для моделирования домена приложения. Этот уровень совершенно не зависит от уровней представления и модели представления.
Уровень представления определяет пользовательский интерфейс с помощью декларативной разметки. Разметка привязки данных устанавливает связь между определенными компонентами пользовательского интерфейса и различными членами модели представления (а иногда модели).
Уровень контроллера обеспечивает связь между пользователем и системой: контролирует ввод данных пользователем и использует модель и представление для реализации необходимой реакции.
Одним из преимуществ разделения кода является то, что код становится более легким для понимания. Это происходит благодаря тому, что код для определенных компонентов может оставаться отдельным от другого кода, благодаря чему можно получить о нем больше сведений и можно повторно использовать в других программах.
Еще одним важным преимуществом разделения пользовательского интерфейса является то, что это упрощает автоматическое модульное тестирование кода, не связанного с интерфейсом по сравнению с проверкой без разделения. NetBeans поддерживает проекты модульных тестов, которые можно использовать для проверки конструкции кода при разработке, а также при выявлении и диагностике ошибок.
В целом надежно связана архитектура усложняет внесении изменений и диагностику ошибок. Основным преимуществом разделенной архитектуры является то, что она изолирует влияние изменений. Это позволяет менее рискованно экспериментировать с новыми возможностями, исправлять ошибки и внедрять вклад соавторов.[5]