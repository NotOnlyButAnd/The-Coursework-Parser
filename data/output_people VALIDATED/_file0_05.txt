1197
РАЗРАБОТКА АДАПТИВНОГО ВЕБ-ЧАТА
5. Разработка чата 
----------
5.1 База данных
Вся информация чата хранится в базе данных MySQL. Общая структура базы данных, для хранения информации о пользователях и общих данных о чате, выглядит следующим образом:
Рисунок 10. Общая структура базы данных для хранения информации о пользователях и общей информации чата
5.2 Анкета пользователя
Анкета пользователя – это страница с его личной информацией. В анкете отражаются данные пользователя - информация о себе, которую он указывает самостоятельно - фото, рассказ о себе и прочее. Анкета в чате выглядит следующим образом:
Рисунок 11. Вид анкеты пользователя на компьютере и мобильном устройстве
Данные анкеты хранятся в отдельной таблице базы данных. Для того, чтобы знать какому именно пользователю принадлежит анкета, в базе данных применена идентифицирующая связь – это такая связь между таблицами, когда строка (или строки) дочерней таблицы строго определяются родительскими и не могут существовать без них. Т.е. если не будет пользователя, например, с id = 7 то и анкеты с id = 7 тоже не будет.  Для организации такой связи в одну таблицу (в данном случае это таблица ankets) помещается поле, содержащее адрес записи другой таблицы (user). Получается следующая схема:
Рисунок 12. Структура таблиц базы данных для анкеты пользователя
5.3 Настройки пользователя
Каждому пользователю доступна страница с настройками личной информации, а также некоторыми настройками чата. Настройки каждого пользователя хранятся в отдельной таблице (ankets) базы данных. Схема базы данных показана на предыдущем рисунке.
5.4 Главная страница
Главная страница представляет из себя два блока для экранов с большим разрешением и один блок для экранов с маленьким разрешением.
В главном блоке выводится информация для пользователя: приветствие, новости и прочее. Именно этот блок остается доступным по умолчанию в версии для экранов с маленьким разрешением.
Блок, в котором отображаются категории тем, каждый день имеет разный вид. Связано это с тем, что каждый в день в 23:59 на сервере в автоматическом режиме происходит анализ данных, на основе которого строится список тем, которые были популярны за прошедшие сутки. Таким образом каждые сутки строится список, который ранжирует категории тем по популярности в данное время.
Автоматический анализ данных удалось организовать с помощью команды cron, доступной на сервере. Cron — классический демон-планировщик задач в UNIX-подобных операционных системах, использующийся для периодического выполнения заданий в определённое время. Регулярные действия описываются инструкциями, помещенными в файлы crontab и в специальные директории. Cron ежеминутно просматривает свои таблицы, в которых содержатся информация о периодичности запуска команд и запускает команды, когда значения полей “минута”, “час”, “месяц” и, хотя бы одно из полей “число” и “день недели”, совпадают с текущим временем. Cron играет незаменимую роль в автоматизации нужных процессов.
5.5 Окно чата
Окно чата так же доступно в двух вариантах: для экранов с большим разрешением и для экранов с маленьким разрешением.
Рисунок 13. Вид окна чата на компьютере и мобильном устройстве
Все сообщения чата хранятся в отельной базе данных, а для каждой комнаты используется своя таблица. Данный способ хранения не единственный. Можно было использовать два подхода для хранения сообщений: тот, что описан выше и хранить сообщения в одной таблице для каждой темы, но с указанием id комнаты для каждого сообщения. Если выбрать второй способ, то время ответа сервера значительно увеличится при большом количестве сообщений, так как их нужно не просто получить списком (как это делается в первом способе), а еще и отсортировать, т.е. выбрать именно те сообщения, id которых соответствует id нужной комнаты.
Таблица для хранения сообщений одной комнаты выглядит следующим образом:
Рисунок 14. Структура таблицы для хранения сообщений одной комнаты.
5.6 Адаптивный дизайн
Для разработки адаптивного дизайна был выбран CSS-фреймворк Bootstrap3. В фреймворк интегрирована поддержка мобильных устройств с шириной окна браузера менее 992 пикселей. Это позволяет шаблону сайта адаптироваться под размер экрана разных устройств, в том числе планшетов компьютеров и мобильных телефонов. Для того чтобы сделать сайт адаптивным применяется адаптивная сетка - коллекция стилей, основанных на классах, которые позволяют разработчику контролировать макет страницы, используя систему строк и колонок. В ходе разработки шаблона, были проанализированы преимущества адаптивной сетки:
1. Блоки с содержимым, которые размещаются в одной строке, при уменьшении размера экрана браузера переходят друг под друга или складываются друг на друга.
2. Ширина блоков изменяется пропорционально изменению ширины окна браузера, за счет чего сайт будет хорошо отображаться на мобильных устройствах и планшетных компьютерах.
Например, на следующих двух скриншотах показано как будет выглядеть шаблон сайта на устройстве с шириной экрана от 768 до 992 пикселей и на устройстве с шириной экрана менее 768 пикселей.
Рисунок 15. Вид шаблона сайта на устройстве с шириной экрана 768-992 пикселей
Рисунок 16. Вид шаблона сайта на устройстве с шириной экрана менее 768 пикселей
В пункте документации по Bootstrap3[5] определены основные принципы использования сетки для верстки шаблона сайта:
1. Весь контент сайта помещается в блоки <div></div>. Для блоков задается определенная ширина и к нему применяется определенный класс.
2. Все блоки сайта помещаются в строки, которые являются их родителями.
3. Строки должны помещаться в общий контейнер с фиксированной или плавающей шириной для правильного размещения контента относительно друг друга.
4. Любой блок можно рассматривать как контейнер и создавать в нем вложенные строки с блоками.
5. Сумма чисел в классах, примененных к блокам одной строки, не должна превышать 12.
На следующем рисунке показа функционал разметки Bootsrap3:
Рисунок 17. Функционал разметки Bootstrap3
По таблице видно, что ширина блока зависит от размера окна браузера и составляет либо от 0 до 60 пикселей, либо 60 пикселей, либо 78 пикселей, либо 95 пикселей. Каждому значению ширины блока соответствует критический размер окна браузера, при уменьшении которого ширина блока пропорционально уменьшается.
В таблице приведены префиксы классов для каждого диапазона ширины блока. Классы можно применять к блокам одной строки. Для задания ширины блока указывается число от 1 до 12 в префиксе, что позволяет разместить один или несколько блоков в строке.
Стоит отметить, что код разметки приведен в общем виде, так как оригинальный код достаточно большой. Все другие страницы чата имеют примерно такую же разметку.
5.7 Интеграция чата с ВКонтакте на базе Open API
Социальная сеть ВКонтакте предоставляет возможности для интеграции со сторонними сайтами. В основном эти возможности представлены уже готовыми виджетами. Однако, есть еще и Open API, которое позволяет не только авторизовать пользователя, но и выполнить любой метод. Работа с Open API проста и понятна, во многом это благодаря подробной документации[6], которая доступна на сайте ВКонтакте.
Для того, чтобы сайт или веб-приложение получило доступ к данным, достаточно зарегистрировать его в кабинете разработчика на сайте социальной сети ВКонтакте. При регистрации пользователю выдается специальный ID, с помощью которого можно инициализировать API (делается это с помощью метода VK.init).
После инициализации API, можно переходить к авторизации, для этого предусмотрен метод  VK.Auth.login.
В параметрах указываются те данные, к которым нужно получить доступ. В примере, указанном выше, доступ запрашивается к списку друзей.
Для вызова любого метода служит метод VK.Api.call, который принимает три параметра — название метода, объект, представляющий собой параметры, передаваемые в указанный метод, и callback-функцию, в которую будет передан результат вызова метода. Например, для получения списка друзей необходимо вызвать метод friends.get. Метод не имеет обязательных параметров и в случае вызова без параметров вернет список всех друзей. Допустим, нам нужны фотографии друзей пользователя, передадим в метод параметр fields со значением 'photo_rec', что соответствует квадратной фотографии со стороной 50 пикселей.
Благодаря Open API любой пользователь может пройти быструю регистрацию или авторизацию в чате, что делает чат более удобным для использования. В статистике чата можно посмотреть сколько человек зарегистрировалось с помощью ВКонтакте, а сколько через стандартную регистрацию чата. В дальнейшем, с помощью Open API, планируется реализовать автоматическое заполнение анкеты чата данными социальной сети ВКонтакте.