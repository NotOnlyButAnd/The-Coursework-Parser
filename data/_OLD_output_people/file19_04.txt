1229
ПОВЫШЕНИЕ ЗАЩИЩЕННОСТИ ПРОЦЕССА СОСТАВЛЕНИЯ, ОБРАБОТКИ И ХРАНЕНИЯ ИНФОРМАЦИОННЫХ КОПИЙ УЧЕБНЫХ ПЛАНОВ ОБРАЗОВАТЕЛЬНОЙ ОРГАНИЗАЦИИ 
1 Реализация процессов составления, обработки и хранения информационных копий учебных планов образовательной организации 
1.3 Особенности структуры XML-документа 
----------
Как мы выяснили в предыдущих пунктах, нам придется работать с учебными планами, а именно с исходными файлами учебных планов формата xml.И для того чтобы иметь  какое то представление предлагаю для начала разобрать что же из себя представляет язык xml.
Простейший XML- документ может выглядеть так, как это показано в Примере 1
Пример 1
<?xml version="1.0"?>
<list_of_items>
<item id="1"><first/>Первый</item>
<item id="2">Второй <sub_item>подпункт 1</sub_item></item>
<item id="3">Третий</item>
<item id="4"><last/>Последний</item>
</list_of_items>
Обратите внимание на то, что этот документ очень похож на обычную HTML-страницу. Также, как и в HTML, инструкции, заключенные в угловые скобки называются тэгами и служат для разметки основного текста документа. В XML существуют открывающие, закрывающие и пустые тэги (в HTML понятие пустого тэга тоже существует, но специального его обозначения не требуется).
Тело документа XML состоит из элементов разметки (markup) и непосредственно содержимого документа - данных (content). XML - тэги предназначены для определения элементов документа, их атрибутов и других конструкций языка. Более подробно о типах применяемой в документах разметки мы поговорим чуть позже.
Любой XML-документ должен всегда начинаться с инструкции , внутри которой также можно задавать номер версии языка, номер кодовой страницы и другие параметры, необходимые программе-анализатору в процессе разбора документа.
Правила создания XML- документа
В общем случае XML- документы должны удовлетворять следующим требованиям:
* в заголовке документа помещается объявление xml, в котором указывается язык разметки документа, номер его версии и дополнительная информация
* каждый открывающий тэг, определяющий некоторую область данных в документе обязательно должен иметь своего закрывающего "напарника", т.е., в отличие от html, нельзя опускать закрывающие тэги
* в xml учитывается регистр символов
* все значения атрибутов, используемых в определении тэгов, должны быть заключены в кавычки
* вложенность тэгов в xml строго контролируется, поэтому необходимо следить за порядком следования открывающих и закрывающих тэгов
* вся информация, располагающаяся между начальным и конечными тэгами, рассматривается в xml как данные и поэтому учитываются все символы форматирования ( т.е. пробелы, переводы строк, табуляции не игнорируются, как в html).
Если XML-документ не нарушает приведенные правила, то он называется формально-правильным и все анализаторы, предназначенные для разбора XML- документов, смогут работать с ним корректно.
Однако кроме проверки на формальное соответствие грамматике языка, в документе могут присутствовать средства контроля над содержанием документа, за соблюдением правил, определяющих необходимые соотношения между элементами и формирующих структуру документа. Например, следующий текст, являясь вполне правильным XML- документом, будет абсолютно бессмысленным:
<country><title>Russia</title><city><title>Krasnodar</country>
</title></city>
Для того, чтобы обеспечить проверку корректности XML- документов, необходимо использовать анализаторы, производящие такую проверку и называемые верифицирующими.
Конструкции языка
Содержимое XML- документа представляет собой набор элементов, секций CDATA, директив анализатора, комментариев, спецсимволов, текстовых данных. Рассмотрим каждый из них подробней.
Элементы данных
Элемент - это структурная единица XML- документа. Заключая слово rose в тэги , мы определяем непустой элемент, называемый , содержимым которого является rose. В общем случае в качестве содержимого элементов могут выступать как просто какой-то текст, так и другие, вложенные, элементы документа, секции CDATA, инструкции по обработке, комментарии, - т.е. практически любые части XML- документа.
Любой непустой элемент должен состоять из начального, конечного тэгов и данных, между ними заключенных. Например, следующие фрагменты будут являться элементами:
<flower>rose</flower>
<city>Krasnodar</city>
а эти - нет:
<rose>
<flower>
rose
Набором всех элементов, содержащихся в документе, задается его структура и определяются все иерархическое соотношения. Плоская модель данных превращается с использованием элементов в сложную иерархическую систему со множеством возможных связей между элементами. Например, в следующем примере мы описываем месторасположение Краснодарских университетов (указываем, что Краснодарский Университет расположен в городе Краснодар, который, в свою очередь, находится в России), используя для этого вложенность элементов XML :
<country id="Russia">
<cities-list>
<city>
<title>Краснодар</title>
<universities-list>
<university id="1">
<title>Краснодарский Университет Информзащиты</title>
<address URL=" http://kiiz.info/ "/>
</university>
</universities-list>
</city>
<city>
<title>Москва</title>
<universities-list>
<university id="1">
<title>Московский Государственный Университет</title>
<address URL="www.msu.ru"/>
</university>
</universities-list>
</city>
</cities-list>
</country>
Производя в последствии поиск в этом документе, программа клиента будет опираться на информацию, заложенную в его структуру - используя элементы документа. Т.е. если, например, требуется найти нужный университет в нужном городе, используя приведенный фрагмент документа, то необходимо будет просмотреть содержимое конкретного элемента <university>, находящегося внутри конкретного элемента <city>. Поиск при этом, естественно, будет гораздо более эффективен, чем нахождение нужной последовательности по всему документу.
В XML документе, как правило, определяется хотя бы один элемент, называемый корневым и с него программы-анализаторы начинают просмотр документа. В приведенном примере этим элементом является <country>
В некоторых случаях тэги могут изменять и уточнять семантику тех или иных фрагментов документа, по разному определяя одну и ту же информацию и тем самым предоставляя приложению-анализатору этого документа сведения о контексте использования описываемых данных. Например, прочитав фрагмент <river>Lena</river> мы можем догадаться, что речь в этой части документа идет о реке, а вот во фрагменте <name>Lena</name> - о имени.
В случае, если элемент не имеет содержимого, т.е. нет данных, которые он должен определять, он называется пустым. Примером пустых элементов в HTML могут служить такие тэги HTML, как <br>, <hr>, <img>;. Необходимо только помнить, что начальный и конечные тэги пустого элемента как бы объединяется в один, и надо обязательно ставить косую черту перед закрывающей угловой скобкой (например, <empty/>;)
Комментарии
Комментариями является любая область данных, заключенная между последовательностями символов. Комментарии пропускаются анализатором и поэтому при разборе структуры документа в качестве значащей информации не рассматриваются.
Атрибуты
Если при определении элементов необходимо задать какие-либо параметры, уточняющие его характеристики, то имеется возможность использовать атрибуты элемента. Атрибут - это пара "название" = "значение", которую надо задавать при определении элемента в начальном тэге. Пример:
<color RGB="true">#ff08ff</color>
<color RGB="false">white</color>
или
<author id=0>Ivan Petrov</autho>
Примером использования атрибутов в HTML является описание элемента <font>:
<font color="white" name="Arial">Black</font>
CDATA
Чтобы задать область документа, которую при разборе анализатор будет рассматривать как простой текст, игнорируя любые инструкции и специальные символы, но, в отличии от комментариев, иметь возможность использовать их в приложении, необходимо использовать тэги . Внутри этого блока можно помещать любую информацию, которая может понадобится программе- клиенту для выполнения каких-либо действий (в область CDATA, можно помещать, например, инструкции JavaScript). Естественно, надо следить за тем, чтобы в области, ограниченной этими тэгами не было последовательности символов .
XML – это способ записи структурированных данных
Под "структурированными данными" обычно подразумевают объекты типа электронных таблиц, адресных книг, конфигурационных параметров, финансовых транзакционных записей, технических чертежей и тому подобные. XML представляет собой набор правил (вы можете также считать их инструкциями или соглашениями) для разработки текстовых форматов, которые позволят вам структурировать ваши данные. XML — это не язык программирования, и вам не нужно быть программистом, чтобы использовать или изучать его. XML облегчает компьютеру задачу создания и чтения данных, обеспечивая при этом однозначность их структуры. XML позволяет избежать распространенных ошибок проектирования языков: он расширяем, независим от платформы, включает поддержку интернационализации и локализации.
Также, как и в HTML, в XML используются тэги (слова, заключенные в '<' и '>') и атрибуты (вида имя="значение"). Но если в HTML фиксируется смысловое значение каждого тэга и атрибута и часто то, как текст между ними будет выглядеть в браузере, в XML тэги используются только для логической разметки данных, и их интерпретация оставляется на усмотрение обрабатывающей программы. Другими словами, если вы встречаете "<p>" в XML-файле, то не стоит думать, что это параграф. В зависимости от контекста, это может быть цена (price), параметр (parameter), человек (person)
Из вышеперечисленных сведений можем сделать вывод что *.xml очень схож c HTML, но у него есть свои отличительные черты, например он достаточно строг в написании, в начале документа должна быть инструкция, внутри которой также можно задавать номер версии языка, номер кодовой страницы и другие параметры, строго должны контролироваться все теги. а именно закрытие и открытие тегов, грамматика языка. Комментарии могут быть любыми так как не учитываются анализатором.XML намного проще чем HTML и для него не нужно никаких программ, его можно написать в обычном блокноте что удобно.