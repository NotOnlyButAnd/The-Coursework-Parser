939
ТЕХНОЛОГИИ РАЗРАБОТКИ WEB-ПРИЛОЖЕНИЙ 
2 Практическая реализация Web-приложения 
2.2 Реализация поставленной задачи 
----------
Программу можно разделить на четыре части:
1)  makson.db,
2)  handler.php,
3)  index.php,
4)  styles.css.
Рассмотрим основные моменты каждой части программы подробнее.
1)  Обязательной частью выполнения поставленной задачи является этап составления базы данных. Для этого воспользуемся Web-приложением phpMyAdmin, представляющим собой интерфейс для администрирования СУБД MySQL. Для начала нужно определить, какие данные статические, то есть можно задать их в программе в виде массивов, а какие могут меняться со временем. К статическим данным относятся такие классы информации, как день недели (day),  четность пары (parity_week), тип (lesson_type) и номер пары (number). Остальные данные, такие как группа, предмет, преподаватель, подгруппа и кабинет, являются динамическими, так как может возникнуть потребность, например,  добавить нового преподавателя или предмет, удалить пару или поменять кабинет. Создадим пять таблиц для наших динамических данных, в каждой таблице будет по два значения: id типа int и name типа varchar.
Дальше нужно составить таблицу, которая будет задавать все пары, и объединять в себе все выше перечисленные данные. Назовем эту таблицу lesson и зададим от таблиц groups, subjects, teachers, sub_groups и cabinets связи 1 к 1, так как пару на текущий момент может вести только 1 преподаватель, только определенный предмет, в указанном кабинете для одной группы и, возможно, какой-то подгруппы. Структура получившейся базы данных представлена на рисунке 4.
Рисунок 4 – структура базы данных расписания makson.db
2)  handler.php содержит в себе серверную часть кода, которая описывает весь функционал нашего Web-приложения, такой как поиск пар по группе, добавление, удаление, изменение пары, отправка данных в модальное окно добавления или редактирования пары, вывод числителя или знаменателя на экран. Файл получает информацию с клиентской стороны приложения, выполняет действия, требующиеся от него, и отправляет результат обратно. На примере поиска пар по группам покажем, как устанавливается связь с базой данных с последующим выполнением необходимых запросов и формируется результат.
С клиентской стороны приходит информация, которая задает входные данные и определяет выполняемые действия. Перед отправкой какого-либо запроса в базу данных необходимо установить с ней соединение. Для этого создадим два дополнительных php файла: dbconfig.php и DB.php. Первый файл содержит в себе всю необходимую информацию для соединения, такую как имя хоста, имя базы данных, логин и пароль. Второй файл содержит класс DB с методом getDb, который осуществляет соединение по установленным в dbconfig.php данным средствами расширения PDO (PHP Data Objects), предоставляющим простой и универсальный интерфейс для доступа к различным базам данных. Теперь, соединение с базой данных будет иметь следующий вид:
$db = DB::getDb();
Далее выполняется запрос на получение всех пар по указанной группе и четности недели (по-умолчанию выводится числитель), отсортированных по дням недели, а затем по номеру пары. После создается строка $snuffeen, которая будет содержать в себе HTML-код таблиц расписания, заполненных по полученным данным, и отправляется в клиентскую часть. Стоит также отметить, что каждая ячейка каждой таблицы имеет собственный номер (id) и класс, по которым определяются заданные события и CSS-стили.
3)  Index.php задает изначальную HTML-структуру Web-приложения, а также все события по нажатию на те или иные элементы в виде скриптов.  Любые действия на странице основаны на обращении к определенным элементам по уникальным идентификаторам и динамическом обновлении при помощи технологии Ajax. Обращения по номерам или классам реализованы методами JavaScript-библиотеки jQuery. Библиотека позволяет работать с элементами DOM без особых сложностей, например, удалять, заменять на другие элементы, редактировать их содержимое или встроенные значения, такие как id или класс, изменять параметры CSS, задавать события на нажатие и многое другое.
Так как в задаче присутствует много функций, все мы их рассматривать не будем, но стоит уделить внимание поиску по группам и вызову модального окна добавления, удаления или редактирования пары.
При нажатии на кнопку поиска по группе вызывается функция groupSearch, формирующая набор данных data. Этот набор заполняется следующими данными: действие, которое нужно выполнить (в нашем случае - поиск по группе), номер группы, введенный в поле input и четность недели. Пример такого набора приведен ниже.
var data = {'type': 'groupSearch', 'group': $("#inputGroup").val(), 'parity': parity};
Поле ввода имеет собственный идентификатор ‘inputGroup’, метод val берет из него текст и записывает его в data[‘group’]. Далее с помощью технологий Ajax отправляется запрос в серверную часть приложения, где выполняются ранее описанные действия. Чтобы Ajax функционировал верно, необходимо указать параметры так, как указано ниже.
url: 'handler.php',
type: "POST",
dataType: "html",
data: data,
Поле url указывает файл, к которому будет произведен запрос. Если такого файла не существует или будет присутствовать ошибка на стороне сервера, то обращение не принесет результата. Type указывает тип запроса, он может быть GET (получить) и POST (отправить). Затем указывается тип возвращаемых данных и сам набор данных.
Если сервер принял запрос и успешно его обработал, то созданная нами строка $snuffeen в клиентской части помещается в переменную response, после чего вставляется в отведенный под таблицы расписания блок класса “.tables” так, как показано ниже.
$(".tables").empty();
$(".tables").append(response);
Работа с модальным окном реализована по похожему принципу. При нажатии на ячейку из нее берется вся информация и вставляется в окно. Если ячейка была пуста, то есть не было пары, то предоставляется возможность добавить новую пару, указав все необходимые параметры. Параметры хранятся либо в базе данных, либо в массивах самой программы, если это статические данные. Если же ячейка не была пустой, то есть мы нажали на пару, можно удалить или редактировать ее содержимое. При добавлении или редактировании пары все теги <p> заменяются на <select> и заполняются присущими им значениями из базы данных или массивов, после чего к ним применяется плагин Chosen и они приобретают удобный и красивый для использования вид. Новые поля выбора предоставляют возможность поиска подходящего значения посредством ввода текста. После того, как все параметры были указаны, и была нажата кнопка «Сохранить», при помощи Ajax также отправляется запрос серверу, откуда уже идет обращение к базе данных.
4)  Styles.css содержит все стили, используемые в нашем Web-приложении. Здесь указаны значения множества параметров, таких как цвет фона и шрифта, размеры каждой ячейки таблицы и самой таблицы, заданы анимации кнопок, поля ввода и многое другое.