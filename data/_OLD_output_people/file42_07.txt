388
РАЗРАБОТКА ПРОГРАММНОГО АГЕНТА ДЛЯ ИНФОРМАЦИОННОГО ПОИСКА В СРЕДЕ ИНТЕРНЕТ 
2 Парсинг сайта . 
2.2 Регулярные выражения . 
----------
Регулярное выражение – это некий шаблон, составленный из символов и спецсимволов, который позволяет находить подстроки соответствующие этому шаблону в других строках. Спецсимволов и различных правил их комбинирования  очень много, поэтому регулярные выражения можно даже назвать отдельным языком программирования.
Регулярные выражения предоставляют различные возможности, некоторые из них:
* заменять в строке все одинаковые слова другим словом, или удалять такие слова;
* выделять из строки необходимую часть. Например, из любой ссылки
(http://mycsharp.ru/post/33/2013_10_19_virtualnye_metody_v_sisharp_pereopredelenie_metodov.html) 	выделять 	только 	доменную 	часть (mycsharp.ru);
* проверять соответствует ли строка заданному шаблону. Например, проверять, правильно ли введен email, телефон т.д.;
* проверять, содержит ли строка заданную подстроку;
* извлекать из строки все вхождения подстрок, соответствующие шаблону регулярного выражения. Например, получить все даты из строки.
Для того, чтобы работать с регулярными выражениями в С#  необходимо подключить в начале программы пространство имен using System.Text.RegularExpressions; 	Работу 	с 	регулярными 	выражениями предоставляет класс Regex. Создание регулярного выражения имеет следующий вид:
Regex myReg = new Regex([шаблон]);
Здесь [шаблон] – это строка содержащая символы и спецсимволы.
Приведем простой пример программы с использованием регулярных выражений:
static void Main(string[] args)
{
string data1 = "Петр, Андрей, Николай";    string data2 = "Петр, Андрей, Александр";
Regex myReg = new Regex("Николай");  // создание регулярного выражения
Console.WriteLine(myReg.IsMatch(data1));  // True
Console.WriteLine(myReg.IsMatch(data2));  // False
Console.ReadKey();
}
Здесь в качестве шаблона выступает однозначная строка "Николай". Дальше был использован метод IsMatch, который проверят, содержит ли заданная строка (data1, data2) подстроку соответствующую шаблону.
Рассмотрим кратко методы класса Regex  для работы с регулярными выражениями:
IsMatch – проверяет, содержит ли строка хотя бы одну подстроку
соответствующую шаблону регулярного выражения.
Match – возвращает первую подстроку, соответствующую шаблону, в виде объекта класса Match. Класс Match предоставляет различную
информацию о подстроке – длину, индекс, само значение и другое.
Matches – возвращает все подстроки соответствующие шаблону в виде коллекции типа MatchCollection. Каждый элемент этой коллекции типа Match.
Replace – возвращает строку, в которой заменены все подстроки,
соответствующие шаблону, новой строкой.
Регулярные выражения для парсинга сайтов следует использовать в случае, если нужно быстро получить небольшой объем известных и неизменяемых  исходных данных. Если же исходные данные меняются,  при использовании регулярных выражений потребуется переписать код программы. При больших объемах данных лучше использовать специальные языки запросов.
Существует много хороших библиотек, поддерживающих языки запросов к элементам для разных  языков программирования, но для быстрой разработки одной из лучших по праву является Html Agility Pack  (HAP). Это NET библиотека –  одна из самых удобных,  с полностью открытым исходным кодом.