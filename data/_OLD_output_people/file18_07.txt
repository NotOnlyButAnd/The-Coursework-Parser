717
РАЗРАБОТКА МОБИЛЬНОГО ПРИЛОЖЕНИЯ ДЛЯ ОТОБРАЖЕНИЯ РАСПИСАНИЯ НА ПЛАТФОРМЕ ANDROID 
2 Теоретические основы разработки 
2.3 Разработка автономных приложений. БД Realm. 
----------
Хотя современные технологии позволяют создавать прогрессивные веб приложения (способные работать в оффлайн режиме, использовать push-уведомления), нативные приложения все равно зарекомендовали себя с лучшей стороны, когда речь идет о разработке автономных приложений. Оффлайн-режим — очень важная вещь, и стоит думать о нем с самого начала работы над приложением. Offline-first подход к разработке мобильных приложений подразумевает под собой некоторый свод правил и техник для успешной разработки автономного мобильного приложения.
Прежде всего изначально приложение проектируется для работы в оффлайн режиме, чтобы пользователь мог продолжать работу в отсутствие интернета и прозрачно синхронизироваться, когда связь появляется. Зачастую большую часть работы на себя берет сервер, однако в данном случае сервер максимально отвязывается от приложения. На стороне сервера остаётся только лёгкий JSON API для доступа к базе данных.
Также для обеспечения независимости приложения от серверной части используют мобильные базы данных, способные сохранять некоторые данные на долгий период времени, и которые не отчищаются при перезагрузке приложения или всего устройства (в отличие от оперативной памяти).
В разрабатываемом приложении будет реализован такой принцип работы. Главное требование – прозрачность обновления информации для пользователя. Как только появляется интернет, клиентская часть синхронизируется при необходимости с серверной, а пользователь продолжает работу, как ни в чем не бывало.
Для этого будет реализована работа с JSON-файлами. JSON (JavaScript Object Notation) - это легкий формат, который используется для обмена данными. Он гораздо короче в записи, чем XML, что положительно скажется на скорости загрузки данных с сервера, а также с ним легко работать и легко извлекать информацию. На сегодняшний день объекты json являются стандартом де-факто в обмене информацией с сервером.
Был выбран следующий сценарий работы:
1.  при загрузке приложения выполняется асинхронный запрос к серверу с целью получить json-файл с более актуальной информацией;
2.  для отображения выбираются сначала данные, хранящиеся в локальной базе данных на устройстве;
3.  если запрос был обработан сервером и был получен json-файл, то новая информация заносится в локальную базу данных;
4.  обновляется отображаемая в приложении информация.
В качестве локальной базы данных будет выступать NoSQL БД Realm. Realm — кросс-платформенная мобильная база данных для Android (доступная в Kotlin и Java) и iOS. Realm была создана, чтобы стать лучше и быстрее, чем SQLite и Core Data. Она не только лучше и быстрее, но и простая в использовании.
Основные особенности и плюсы Realm:
1.  Работает в режиме Zero copy – поддерживает операции, в ходе которых процессор не выполняет задачу копирования данных из одной области памяти в другую;
2.  Основана на ACID – требованиях к транзакционной системе, обеспечивающих наиболее надёжную и предсказуемую работу;
3.  Является NoSQL базой данных.
Требования ACID заключаются в следующем:
1.  Atomicity (Атомарность) – гарантирует, что никакая транзакция не будет зафиксирована в системе частично. Будут либо выполнены все её подоперации, либо не выполнено ни одной. Поскольку на практике невозможно одновременно и атомарно выполнить всю последовательность операций внутри транзакции, вводится понятие «отката» (rollback): если транзакцию не удаётся полностью завершить, результаты всех её до сих пор произведённых действий будут отменены и система вернётся во «внешне исходное» состояние;
2.  Consistency (Согласованность) – согласованность данных друг с другом, целостность данных, а также внутренняя непротиворечивость;
3.  Isolation (Изолированность) – во время выполнения транзакции параллельные транзакции не должны оказывать влияния на её результат;
4.  Durability (Долговечность) – если пользователь получил подтверждение от системы, что транзакция выполнена, он может быть уверен, что сделанные им изменения не будут отменены из-за какого-либо сбоя.
Преимущества Realm как NoSQL базы данных заключаются в том, что скорость обработки данных гораздо выше, чем в любых реляционных аналогах, а зачастую и NoSQL аналогах [4].
Рисунок 2 – Сравнение скорости чтения Realm с другими мобильными БД
В NoSQL нет ограничений на типы хранимых данных, а при необходимости можно добавлять новые типы данных, что позволит масштабировать и изменять сложность системы в будущем, например, добавлением новых полей к объектам json. Для этого не придется заново создавать некие таблицы или пересоздавать старые. Еще одним достоинством Realm является чрезвычайно простой механизм запросов.
Все объекты, полученные из Realm, являются, так называемыми «живыми объектами», своеобразными прокси к базе данных. Объекты не копируются из базы в промежуточные переменные. Вместо этого в переменную записывается аналог ссылки на объект. Такое взаимодействие позволяет, например, избежать дополнительных запросов-выборок к БД в случае изменения данных – переменные, содержащие ссылки на изменившиеся объекты автоматически будут иметь в качестве своих полей новые данные. А так как запросы к серверу будут выполняться асинхронно, то обновление данных в БД не потребует удаления старых объектов и записи, вместо этого может быть выполнено редактирование «живых объектов».