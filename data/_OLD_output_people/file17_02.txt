492
Изучение организации многопоточности в Java и Python 
1. Основные определения и понятия, принятые в параллельном и распределенном моделировании 
1.1. Определения 
----------
Многопоточность – тип многозадачности, в котором все задачи исходят из одной и той же программы (процесса) и, казалось бы, выполняются одновременно. Эта одновременная обработка обманчива, поскольку центральный процессор очень быстро переключает свою активность между всеми потоками (которые являются исполняемыми объектами, каждый со своими стеками, регистрами и счетчиками команд).
Потоки и процессы взаимосвязанные определения, но их следует различать.
Процесс – это совокупность кода и данных, имеющих общее виртуальное адресное пространство. Чаще всего программа состоит из одного процесса. Процессы изолированы друг от друга, поэтому прямой доступ к памяти чужого процесса невозможен. Если процессу нужно получить доступ к ресурсам другого процесса, необходимо использовать межпроцессное взаимодействие: конвейеры, файлы, каналы связи между компьютерами и многое другое.
Поток – набор кода, который служит дополнительной структурой компоновки в программе. Потоки позволяют различным частям программы работать независимо (по времени) друг от друга, а не в фиксированной последовательности и на отдельных процессорах или ядрах одного процессора. Запущенная программа (процесс) может иметь несколько активных потоков одновременно: один может решать математическое уравнение, другой может рисовать график, а третий вести диалог с пользователем. Операционная система решает, какой поток или процесс виден пользователю, а какой остается скрытым.
Рисунок 1 – Разница процесса и потока
Следует отдельно пояснить понятие многопоточности на одноядерных процессорах. По определению одноядерный процессор может обрабатывать команды только последовательно. Однако существует технология «псевдо-параллелизма». Смысл данной технологии в том, что система будет время от времени переключаться между потоками, поочерёдно выполняя их. (см. рисунок 2) Для решения некоторых задач это технология даёт значительный выигрыш по времени.
Рисунок 2 – Псевдо-параллелизм
Синхронизация потоков - это процесс, который позволяет координировать выполнение всех запущенных потоков, то есть выполнение по определённым правилам, которые устанавливаются программистом.
Для чего это нужно?
Рассмотрим простой пример – операции с банковскими счетами: есть два потока – A и B. Они имеют одинаковую исполняемую часть – снять 10 000 рублей с банковского счёта. Каждый поток знает, что если на счету недостаточно денег, то он не может произвести операцию.
Задача: выполнить потоки A и B. На банковском счету лежит 15 000 рублей.
Рассмотрим выполнение в последовательное (однопоточном) режиме. Сначала выполнится поток A: на счету 15 000 рублей, значит снять 10 000 возможно, следовательно, после выполнения этого потока на счету остаётся 5 000 рублей. После завершения потока A выполняется поток B: при попытке снять 10 000 рублей возникает ошибка – недостаточно средств на счету и поток B завершается. В результате поток А списал 10 000 рублей, поток B ничего не списал и на счету осталось 5 000 рублей.
Теперь же рассмотрим выполнение этой же задачи в многопоточном режиме. Потоки A и B одновременно обращаются к банковскому счёту, смотрят что на нём достаточно денег для снятия и производят списание. В результате поток A списал 10 000 рублей, поток B списал 10 000 рублей и на счету осталось 5 000 рублей. Из доступных 15 000 мы сняли 20 000 и ещё 5 000 осталось на счету. А всё из-за отсутствия синхронизации потоков.
Способы реализации синхронизации для разных языков программирования разные, так что рассмотрим их позже для Java и Python.