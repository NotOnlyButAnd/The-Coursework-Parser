526
WEB СЕРВИС ДЛЯ РАЗВИТИЯ МАЛОГО БИЗНЕСА 
3 Стек технологий для разработки и внедрения программы для автоматизации продвижения в социальных сетях 
3.3 Работа с VK API 
----------
1)  Для того, чтобы разобраться с VK API, необходимо усвоить некоторые понятия:
2)  GET запрос – это обычный HTTP или HTTP/s запрос на URL ссылку с «Открытыми» параметрами, то есть все параметры (если они есть) запроса передаются в самой ссылке. Такие запросы используются для получения данных, которые может увидеть любой пользователь, и которые не обязательно скрывать.
3)  POST запрос – это HTTP или HTTP/s запрос на URL ссылку с «Закрытыми» параметрами, то есть все параметры запроса передаются в теле запроса в скрытом виде.  Такие запросы используются для авторизации на сайте, осуществления каких-либо действий на сайте, которые требуют дополнительных параметров. Например, «Поиск» требует наличия ключевых слов, так же на некоторых сайтах неавторизированным пользователям поиск запрещен, авторизация проверяется исходя из заголовка и тела нашего запроса. «Отправка комментария» требует нескольких параметров, зачастую это наличие авторизации, текст комментария, заголовок, время и так далее. Пожалуй, самый важный пример использования POST запроса – это авторизация. Существует огромное количество сайтов, на которых для того, чтобы получить доступ ко многим данным необходимо авторизоваться.
4)  JSON – это формат, который хранит структурированную информацию и в основном используется для передачи данных между сервером и клиентом.
5)  API (Application Programming Interface) представляет собой совокупность различных инструментов, функций, реализованных в виде интерфейса для создания новых приложений, благодаря которому одна программа будет взаимодействовать с другой.
Используя эти понятия можно дать определение следующему. VK API – это набор методов ВКонтакте, позволяющих разработчику работать с социальной сетью Вконтакте и писать собственные клиенты социальной сети. Для получения доступа к методам необходимо зарегистрировать приложение на сайте https://vk.com/editapp?act=create , далее использовать выданный специальный CLIENT_SECRET и CLIENT_ID при авторизации аккаунта. После чего сервер вернёт ACCESS_TOKEN – который сообщает об успешной авторизации и позволяет использовать методы VK API. Для того, чтобы воспользоваться методом необходимо отправить POST запрос с параметрами, среди которых обязательно должны указываться ACCESS_TOKEN, выданный при авторизации, а также V (версию API) и LANG (язык). Ответ приходит в формате JSON, в котором содержится информация об успешности запроса, об ошибках, а также о том, появилась ли капча. Как уже сообщалось ранее, для работы с VK API в программе реализован класс VK.
3.4	Работа с сетью и отправка запросов в Qt
Для осуществления отправки запросов в классе VK реализован объект Request, в котором и находятся необходимые методы GET и POST. Сами методы реализованы с использованием классов QNetworkAccessManager, QNetworkReply, QNetworkRequest, QNetworkProxy, QEventLoop, QTimer и QMap для передачи параметров POST запроса.
QNetworkAccessManager – инициализируется в конструкторе класса: QNetworkAccessManager *http = new QNetworkAccessManager(this);
Краткая реализация метода POST без приведения обработки ошибок и редиректов:
public QString post(QString url, QMap postData) {
QNetworkRequest request;
request.setUrl(QUrl(url));
QStringList postDataList;
for (auto key: postData.keys()) {
postDataList.append(QString(“%1=%2”).arg(key,postData.value(key)));
}
QEventLoop eloop;
QNetworkReply *reply = http->post(request, postDataList.join(“&”));
connect(reply,&QNetworkReply::finished,&eloop,&QEventLoop:quit);
QTimer::singleShot(3000,&QEventLoop::quit,&eloop);
eloop.exec();
QString result = reply->readAll();
reply->deleteLater();
return result;
}
Реализация метода GET достигается подобным образом, за исключением отсутствия postDataList, а так же метод http->post(…) заменяется на http->get(…). Так же в этом классе реализована работа с Proxy сервером с помощью класса QNetworkProxy. Метод public setProxyRow(QString row) получает на вход строку, содержащую данные о сервере, записанные через разделитель, разбивает эти данные и создает объект:
QNetworkProxy proxy;
proxy->setType(QNetworkProxy::httpOnly); //Или другой тип в зависимости от строки row
proxy->setHost(ip);
proxy->setPort(port);
proxy->setUsername(login);
proxy->setPassword(pass);
Далее этот объект устанавливается в заранее проинициализированный объект http методом setProxy(QNetworkProxy proxy).